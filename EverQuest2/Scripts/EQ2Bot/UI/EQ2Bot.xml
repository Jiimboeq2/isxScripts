<?xml version="1.0" encoding="UTF-8" ?>
<ISUI>
  <Window name='EQ2 Bot'>
    <X>10</X>
    <Y>10</Y>
    <Width>500</Width>
    <Height>500</Height>
    <StorePosition>1</StorePosition>
    <Title>EQ2Bot</Title>
    <TitleBar template='window.Titlebar'>
      <Children>
        <Text Name='Title' Template='window.Titlebar.Title' />
        <Button Name='Minimize' Template='window.Titlebar.Minimize' />
        <Button Name='Maximize' Template='window.Titlebar.Maximize' />
        <commandbutton name='Custom Close Button' Template='window.Titlebar.Close'>
          <Command>Script[EQ2Bot]:End</Command>
        </commandbutton>
      </Children>
    </TitleBar>
    <OnLoad>
    </OnLoad>
    <OnUnload>
    </OnUnload>
    <OnLeftClick>
      This:SetFocus
    </OnLeftClick>
    <OnRender>
      if ${UIElement[EQ2 Bot].Minimized}
      {
				UIElement[Title@TitleBar@EQ2 Bot]:SetText[EQ2Bot: ${Script[EQ2Bot].Variable[Me_Name]}]
		  }
      else
      {
      	UIElement[Title@TitleBar@EQ2 Bot]:SetText[EQ2Bot - ${Script[EQ2Bot].Variable[Me_Name]}]
      	if ${UIElement[EQ2 Bot].FindChild[EQ2Bot Tabs].FindChild[Main].Visible}
      	{
      		if ${UIElement[EQ2 Bot].Height} != 350
      		{
      			UIElement[EQ2 Bot]:SetHeight[350]
      		}
      	}
      	elseif  ${UIElement[EQ2 Bot].FindChild[EQ2Bot Tabs].FindChild[EQ2Bot Options].Visible}
      	{
      		if ${UIElement[EQ2 Bot].Height} != 350
      		{
      			UIElement[EQ2 Bot]:SetHeight[350]
      		}
    		}
      }
    </OnRender>
    <Children>
      <Tabcontrol Name='EQ2Bot Tabs'>
        <X>1%</X>
        <Y>1%</Y>
        <Height>98%</Height>
        <Width>98%</Width>
        <Tabs>
          <Tab Name='Main'>
            <checkbox Name='MainTank'>
              <X>5%</X>
              <Y>10</Y>
              <Width>20%</Width>
              <Height>20</Height>
              <Text>Main Tank:</Text>
              <OnLoad>
                if ${Script[EQ2Bot].VariableScope.MainTank}
                {
                This:SetChecked
                }
              </OnLoad>
              <OnLeftClick>
                if ${This.Checked}
                {
                UIElement[EQ2 Bot].FindUsableChild[MainTank Frame,Frame]:Hide
                Script[EQ2Bot].Variable[MainTank]:Set[TRUE]
                LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[I am the Main Tank?,TRUE]
                Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                Script[EQ2Bot].Variable[MainTankPC]:Set[${Me.Name}]
                Script[EQ2Bot].Variable[MainTankID]:Set[${Me.ID}]
                Script[EQ2Bot].Variable[OriginalMT]:Set[${Me.Name}]
                LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Who is the Main Tank?,${Me.Name}]
                Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                }
                else
                {
                UIElement[EQ2 Bot].FindUsableChild[MainTank Frame,Frame]:Show
                Script[EQ2Bot].Variable[MainTank]:Set[FALSE]
                LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[I am the Main Tank?,FALSE]
                Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                Script[EQ2Bot].Variable[MainTankPC]:Set[${UIElement[EQ2 Bot].FindUsableChild[MainTank,combobox].SelectedItem.Text}]
                Script[EQ2Bot].Variable[MainTankID]:Set[${Actor[exactname,${Script[EQ2Bot].Variable[MainTankPC]}].ID}]
                Script[EQ2Bot].Variable[OriginalMT]:Set[${UIElement[EQ2 Bot].FindUsableChild[MainTank,combobox].SelectedItem.Text}]
                LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Who is the Main Tank?,${UIElement[EQ2 Bot].FindUsableChild[MainTank,combobox].SelectedItem.Text}]
                Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                }
              </OnLeftClick>
            </checkbox>
            <Frame Name='MainTank Frame'>
              <X>26%</X>
              <Y>10</Y>
              <Height>20</Height>
              <Width>95%</Width>
              <OnLoad>
                if ${Script[EQ2Bot].VariableScope.MainTank}
                {
                This:Hide
                }
                else
                {
                This:Show
                }
              </OnLoad>
              <Children>
                <combobox name='MainTank'>
                  <x>1</x>
                  <y>1</y>
                  <Width>
                    20%
                  </Width>
                  <Height>
                    20
                  </Height>
                  <Items>
                  </Items>
                  <Sort>Text</Sort>
                  <OnLoad>
                    if ${Actor[exactname,${Script[EQ2Bot].Variable[MainTankPC]}].Name(exists)}
                    {
                    This:AddItem[${Script[EQ2Bot].Variable[MainTankPC]}]
                    This.ItemByText[${Script[EQ2Bot].Variable[MainTankPC]}]:Select
                    }
                  </OnLoad>
                  <OnSelect>
                    if ${UIElement[EQ2 Bot].FindUsableChild[MainTank,checkbox].Checked}
                    {
                    LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[I am the Main Tank?,TRUE]
                    Script[EQ2Bot].Variable[MainTank]:Set[TRUE]
                    }
                    else
                    {
                    LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[I am the Main Tank?,FALSE]
                    Script[EQ2Bot].Variable[MainTank]:Set[FALSE]
                    }
                    Script[EQ2Bot].Variable[MainTankPC]:Set[${This.SelectedItem.Text}]
                    Script[EQ2Bot].Variable[MainTankID]:Set[${Actor[exactname,${Script[EQ2Bot].Variable[MainTankPC]}].ID}]
                    Script[EQ2Bot].Variable[OriginalMT]:Set[${This.SelectedItem.Text}]
                    LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Who is the Main Tank?,${This.SelectedItem.Text}]
                    Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                  </OnSelect>
                  <OnLeftClick>
                    declare tmpvar int
                    This:ClearItems
                    tmpvar:Set[1]
                    if ${Me.InRaid}
                    {
                    do
                    {
                    if ${Me.Raid[${tmpvar}].InZone}
                    {
                    if !${Me.Raid[${tmpvar}].Name.Equal[${Me.Name}]}
                    {
                    This:AddItem[${Me.Raid[${tmpvar}].Name}]
                    }
                    }
                    }
                    while ${tmpvar:Inc}&lt;= ${Me.Raid}
                    }
                    elseif ${Me.Group} > 1
                    {
                    do
                    {
                    if ${Me.Group[${tmpvar}].InZone} &amp;&amp; !${Me.Group[${tmpvar}].Name.Equal[${Me.Name}]}
                    {
                    This:AddItem[${Me.Group[${tmpvar}].Name}]
                    }
                    if ${Me.Group[${tmpvar}].InZone}
                    {
                    if ${Actor[${Me.Group[${tmpvar}].Pet.Name}].Name(exists)}
                    {
                    This:AddItem[${Me.Group[${tmpvar}].Pet.Name}]
                    }
                    }
                    }
                    while ${tmpvar:Inc}&lt; ${Me.Group}
                    }

                    if ${Me.Pet(exists)}
                    {
                    This:AddItem[${Me.Pet.Name}]
                    }
                    This:Sort
                  </OnLeftClick>
                  <AutoTooltip>Check the box to set yourself as MT</AutoTooltip>
                </combobox>
              </Children>
            </Frame>



            <Commandbutton name='Reacquire KillTarget'>
              <X>65%</X>
              <Y>70</Y>
              <Width>115</Width>
              <Height>21</Height>
              <Visible>0</Visible>
              <Text>Reacquire KillTarget</Text>
              <AutoTooltip>Reacquire KillTarget from MA</AutoTooltip>
              <OnLoad>
              </OnLoad>
              <OnLeftClick>
                Script[EQ2Bot]:QueueCommand[call ReacquireKillTargetFromMA]
              </OnLeftClick>
            </Commandbutton>
            <Commandbutton name='Set KillTarget'>
              <X>65%</X>
              <Y>95</Y>
              <Width>115</Width>
              <Height>21</Height>
              <Visible>0</Visible>
              <Text>Set New KillTarget</Text>
              <OnLoad>
              </OnLoad>
              <OnLeftClick>
                Script[EQ2Bot]:QueueCommand[call SetNewKillTarget]
              </OnLeftClick>
            </Commandbutton>
            <Commandbutton name='Feign Death'>
              <X>65%</X>
              <Y>120</Y>
              <Width>115</Width>
              <Height>21</Height>
              <Visible>0</Visible>
              <Text>Feign Death</Text>
              <OnLoad>
              </OnLoad>
              <OnLeftClick>
                Script[EQ2Bot]:QueueCommand[call FeignDeath]
              </OnLeftClick>
            </Commandbutton>
            <Commandbutton name='Harm Touch'>
              <X>65%</X>
              <Y>145</Y>
              <Width>115</Width>
              <Height>21</Height>
              <Visible>0</Visible>
              <Text>Harm Touch</Text>
              <OnLoad>
              </OnLoad>
              <OnLeftClick>
                Script[EQ2Bot]:QueueCommand[call HarmTouch]
              </OnLeftClick>
            </Commandbutton>

            <checkbox Name='MainAssist'>
              <X>5%</X>
              <Y>30</Y>
              <Width>20%</Width>
              <Height>20</Height>
              <Text>Main Assist:</Text>
              <OnLoad>
                if ${Script[EQ2Bot].Variable[MainAssistMe]}
                {
                This:SetChecked
                }
              </OnLoad>
              <OnLeftClick>
                if ${This.Checked}
                {
                UIElement[EQ2 Bot].FindUsableChild[MainAssist Frame,Frame]:Hide
                Script[EQ2Bot].Variable[MainAssistMe]:Set[TRUE]
                LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[I am the Main Assist?,TRUE]
                Script[EQ2Bot].Variable[MainAssist]:Set[${Me.Name}]
                Script[EQ2Bot].Variable[MainAssistID]:Set[${Me.ID}]
                Script[EQ2Bot].Variable[OriginalMA]:Set[${Me.Name}]
                LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Who is the Main Assist?,${Me.Name}]
                }
                else
                {
                UIElement[EQ2 Bot].FindUsableChild[MainAssist Frame,Frame]:Show
                Script[EQ2Bot].Variable[MainAssistMe]:Set[FALSE]
                LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[I am the Main Assist?,FALSE]
                Script[EQ2Bot].Variable[MainAssist]:Set[${UIElement[EQ2 Bot].FindUsableChild[MainAssist,combobox].SelectedItem.Text}]
                Script[EQ2Bot].Variable[MainAssistID]:Set[${Actor[exactname,${Script[EQ2Bot].Variable[MainAssist]}].ID}]
                Script[EQ2Bot].Variable[OriginalMA]:Set[${UIElement[EQ2 Bot].FindUsableChild[MainAssist,combobox].SelectedItem.Text}]
                LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Who is the Main Assist?,${UIElement[EQ2 Bot].FindUsableChild[MainAssist,combobox].SelectedItem.Text}]
                }
                Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
              </OnLeftClick>
              <AutoTooltip>Check the box to set yourself as MA</AutoTooltip>
            </checkbox>
            <Frame Name='MainAssist Frame'>
              <X>26%</X>
              <Y>30</Y>
              <Height>20</Height>
              <Width>95%</Width>
              <OnLoad>
                if ${Script[EQ2Bot].Variable[MainAssistMe]}
                {
                This:Hide
                }
                else
                {
                This:Show
                }
              </OnLoad>
              <Children>
                <combobox name='MainAssist'>
                  <x>1</x>
                  <y>1</y>
                  <Width>
                    20%
                  </Width>
                  <Height>
                    20
                  </Height>
                  <Items>
                  </Items>
                  <Sort>Text</Sort>
                  <OnLoad>
                    if ${Actor[exactname,${Script[EQ2Bot].Variable[MainAssist]}].Name(exists)}
                    {
                    This:AddItem[${Script[EQ2Bot].Variable[MainAssist]}]
                    This.ItemByText[${Script[EQ2Bot].Variable[MainAssist]}]:Select
                    }
                  </OnLoad>
                  <OnSelect>
                    if ${UIElement[EQ2 Bot].FindUsableChild[MainAssist,checkbox].Checked}
                    {
                    LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[I am the Main Assist?,TRUE]
                    Script[EQ2Bot].Variable[MainAssistMe]:Set[TRUE]
                    }
                    else
                    {
                    LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[I am the Main Assist?,FALSE]
                    Script[EQ2Bot].Variable[MainAssistMe]:Set[FALSE]
                    }
                    Script[EQ2Bot].Variable[MainAssist]:Set[${This.SelectedItem.Text}]
                    Script[EQ2Bot].Variable[MainAssistID]:Set[${Actor[exactname,${Script[EQ2Bot].Variable[MainAssist]}].ID}]
                    Script[EQ2Bot].Variable[OriginalMA]:Set[${This.SelectedItem.Text}]
                    LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Who is the Main Assist?,${This.SelectedItem.Text}]
                    Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                  </OnSelect>
                  <OnLeftClick>
                    declare tmpvar int
                    This:ClearItems
                    tmpvar:Set[1]
                    if ${Me.InRaid}
                    {
                    do
                    {
                    if ${Me.Raid[${tmpvar}].InZone}
                    {
                    This:AddItem[${Me.Raid[${tmpvar}].Name}]
                    }
                    }
                    while ${tmpvar:Inc}&lt;= ${Me.Raid}
                    }
                    elseif ${Me.Group} > 1
                    {
                    do
                    {
                    if ${Me.Group[${tmpvar}].InZone}
                    {
                    This:AddItem[${Me.Group[${tmpvar}].Name}]
                    }
                    if ${Me.Group[${tmpvar}].PetID(exists)}
                    {
                    if ${Actor[${Me.Group[${tmpvar}].PetID}].Name(exists)}
                    {
                    This:AddItem[${Me.Group[${tmpvar}].Pet.Name}]
                    }
                    }
                    }
                    while ${tmpvar:Inc}&lt; ${Me.Group}
                    }

                    if ${Me.Pet(exists)}
                    {
                    This:AddItem[${Me.Pet.Name}]
                    }
                    This:Sort
                  </OnLeftClick>
                </combobox>
                <Text Name='MainAssist Text'>
                  <X>23%</X>
                  <Y>1</Y>
                  <Width>20%</Width>
                  <Height>20</Height>
                  <Alignment>Left</Alignment>
                  <Text>and ASSIST at:</Text>
                </Text>
                <Textentry Name='AssistHP'>
                  <X>42%</X>
                  <Y>1</Y>
                  <Width>5%</Width>
                  <Height>15</Height>
                  <Color>FFDDBB00</Color>
                  <MaxLength>3</MaxLength>
                  <OnLoad>This:SetText[${Script[EQ2Bot].Variable[AssistHP]}]</OnLoad>
                  <OnChange>
                    LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Assist and Engage in combat at what Health?,${This.Text}]
                    Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                    Script[EQ2Bot].Variable[AssistHP]:Set[${This.Text}]
                  </OnChange>
                </Textentry>
                <Text Name='Health Text'>
                  <X>48%</X>
                  <Y>1</Y>
                  <Width>20%</Width>
                  <Height>20</Height>
                  <Alignment>Left</Alignment>
                  <Text>%  Health</Text>
                </Text>
              </Children>
            </Frame>
            <Frame Name='Following Frame'>
              <X>1</X>
              <Y>60</Y>
              <Height>60</Height>
              <Width>95%</Width>
              <OnLoad>
                if ${Script[EQ2Bot].Variable[PathType]}
                {
                UIElement[EQ2 Bot].FindUsableChild[Following Frame,Frame]:Hide
                }
                else
                {
                UIElement[EQ2 Bot].FindUsableChild[Following Frame,Frame]:Show
                }
              </OnLoad>
              <Children>
                <Commandcheckbox Name='AutoFollow'>
                  <X>5%</X>
                  <Y>13</Y>
                  <Width>40</Width>
                  <Height>20</Height>
                  <Text>EQ2's Auto Follow:</Text>
                  <AutoTooltip>Select to use EQ2 AutoFollow on the Main Assist instead of EQ2bot Follow</AutoTooltip>
                  <OnLeftClick>
                    if ${This.Checked}
                    {
                    Script[EQ2Bot].Variable[AutoFollowMode]:Set[TRUE]
                    LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras]:AddSetting["Auto Follow Mode",TRUE]
                    Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                    }
                    else
                    {
                    Script[EQ2Bot].Variable[AutoFollowMode]:Set[FALSE]
                    LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras]:AddSetting["Auto Follow Mode",FALSE]
                    Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                    }
                  </OnLeftClick>
                  <Data>${LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras].FindSetting[Auto Follow Mode]}</Data>
                </Commandcheckbox>
                <combobox name='AutoFollowee'>
                  <x>33%</x>
                  <y>10</y>
                  <Width>
                    20%
                  </Width>
                  <Height>
                    20
                  </Height>
                  <AutoTooltip>The Group Member to auto follow</AutoTooltip>
                  <Items>
                  </Items>
                  <OnLoad>
                    if ${Actor[exactname,${LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras].FindSetting[AutoFollowee]}].Name(exists)}
                    {
                    This:AddItem[${LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras].FindSetting[AutoFollowee]}]
                    This.ItemByText[${LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras].FindSetting[AutoFollowee]}]:Select
                    }
                  </OnLoad>
                  <OnSelect>
                    Script[EQ2Bot].Variable[AutoFollowee]:Set[${This.SelectedItem.Text}]
                    LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras]:AddSetting[AutoFollowee,${This.SelectedItem.Text}]
                    Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                  </OnSelect>
                  <OnLeftClick>
                    declare tmpvar int

                    This:ClearItems
                    tmpvar:Set[1]
                    do
                    {
                    if ${Me.Group[${tmpvar}].InZone}
                    {
                    This:AddItem[${Me.Group[${tmpvar}].Name}]
                    }
                    }
                    while ${tmpvar:Inc}&lt; ${Me.Group}
                  </OnLeftClick>
                </combobox>
                <Commandcheckbox Name='RetainAutoFollowInCombat'>
                  <X>5%</X>
                  <Y>35</Y>
                  <Width>40</Width>
                  <Height>20</Height>
                  <Text>Retain EQ2's Auto Follow in combat</Text>
                  <AutoTooltip>Retain EQ2's Auto Follow while in combat</AutoTooltip>
                  <OnLeftClick>
                    if ${This.Checked}
                    {
	                    Script[EQ2Bot].Variable[RetainAutoFollowInCombat]:Set[TRUE]
	                    LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras]:AddSetting[RetainAutoFollowInCombat,TRUE]
	                    Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                    }
                    else
                    {
	                    Script[EQ2Bot].Variable[RetainAutoFollowInCombat]:Set[FALSE]
	                    LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras]:AddSetting[RetainAutoFollowInCombat,FALSE]
	                    Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                    }
                  </OnLeftClick>
                  <Data>${LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras].FindSetting[RetainAutoFollowInCombat]}</Data>
                </Commandcheckbox>                
              </Children>
            </Frame>
            <Frame Name='Movement Frame'>
              <X>1</X>
              <Y>102</Y>
              <Height>60</Height>
              <Width>95%</Width>
              <OnLoad>
              </OnLoad>
              <Children>
                <Commandcheckbox Name='NoAutoMovementInCombat'>
                  <X>5%</X>
                  <Y>13</Y>
                  <Width>40</Width>
                  <Height>20</Height>
                  <Text>No scripted movement while in combat</Text>
                  <AutoTooltip>Select to have the bot do NO 'auto' movement during combat</AutoTooltip>
                  <OnLeftClick>
                    if ${This.Checked}
                    {
                    Script[EQ2Bot].Variable[NoAutoMovementInCombat]:Set[TRUE]
                    LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras]:AddSetting["NoAutoMovementInCombat",TRUE]
                    Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                    }
                    else
                    {
                    Script[EQ2Bot].Variable[NoAutoMovementInCombat]:Set[FALSE]
                    LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras]:AddSetting["NoAutoMovementInCombat",FALSE]
                    Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                    }
                  </OnLeftClick>
                  <Data>${LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras].FindSetting[NoAutoMovementInCombat]}</Data>
                </Commandcheckbox>
                <Commandcheckbox Name='NoAutoMovement'>
                  <X>5%</X>
                  <Y>33</Y>
                  <Width>40</Width>
                  <Height>20</Height>
                  <Text>No scripted movement whatsoever</Text>
                  <AutoTooltip>Select to have the bot do NO 'auto' movement whatsoever</AutoTooltip>
                  <OnLeftClick>
                    if ${This.Checked}
                    {
                    Script[EQ2Bot].Variable[NoAutoMovement]:Set[TRUE]
                    LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras]:AddSetting["NoAutoMovement",TRUE]
                    Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                    }
                    else
                    {
                    Script[EQ2Bot].Variable[NoAutoMovement]:Set[FALSE]
                    LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras]:AddSetting["NoAutoMovement",FALSE]
                    Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                    }
                  </OnLeftClick>
                  <Data>${LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras].FindSetting[NoAutoMovement]}</Data>
                </Commandcheckbox>
              </Children>
            </Frame>
            <Frame Name='Pathing Frame'>
              <X>1</X>
              <Y>170</Y>
              <Height>160</Height>
              <Width>95%</Width>
              <OnLoad>
              </OnLoad>
              <Children>
                <Text Name='Combat Pathing Text'>
                  <X>30%</X>
                  <Y>9</Y>
                  <Width>95%</Width>
                  <Height>20</Height>
                  <Alignment>Left</Alignment>
                  <Text>== Combat Pathing Selection ==</Text>
                </Text>
                <checkbox Name='Manual'>
                  <X>5%</X>
                  <Y>21</Y>
                  <Width>20%</Width>
                  <Height>20</Height>
                  <Text>Manual Movement</Text>
                  <OnLoad>
                    if !${Script[EQ2Bot].Variable[PathType]}
                    {
                    This:SetChecked
                    }
                  </OnLoad>
                  <OnLeftClick>
                    if ${This.Checked}
                    {
                    UIElement[EQ2 Bot].FindUsableChild[Following Frame,Frame]:Show
                    Script[EQ2Bot].Variable[PathType]:Set[0]
                    LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[What Path Type (0-4)?,0]
                    Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                    UIElement[Minimum@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:UnsetChecked
                    UIElement[Camp@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:UnsetChecked
                    UIElement[Dungeon Crawl@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:UnsetChecked
                    UIElement[Auto Hunting@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:UnsetChecked
                    }
                  </OnLeftClick>
                </checkbox>
                <checkbox Name='Minimum'>
                  <X>5%</X>
                  <Y>41</Y>
                  <Width>20%</Width>
                  <Height>20</Height>
                  <Text>Minimum Movement - Home Point Set</Text>
                  <OnLoad>
                    if ${Script[EQ2Bot].Variable[PathType]}==1
                    {
                    This:SetChecked
                    }
                  </OnLoad>
                  <OnLeftClick>
                    if ${This.Checked}
                    {
                    UIElement[EQ2 Bot].FindUsableChild[Following Frame,Frame]:Hide
                    Script[EQ2Bot].Variable[PathType]:Set[1]
                    LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[What Path Type (0-4)?,1]
                    Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                    UIElement[Manual@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:UnsetChecked
                    UIElement[Camp@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:UnsetChecked
                    UIElement[Dungeon Crawl@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:UnsetChecked
                    UIElement[Auto Hunting@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:UnsetChecked
                    }
                    else
                    {
                    if !${UIElement[Manual@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot].Checked}
                    UIElement[Manual@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:LeftClick
                    }
                  </OnLeftClick>
                </checkbox>
                <checkbox Name='Camp'>
                  <X>5%</X>
                  <Y>61</Y>
                  <Width>20%</Width>
                  <Height>20</Height>
                  <Text>Camp - Follow Small Nav Path with multiple Pull Points</Text>
                  <OnLoad>
                    if ${Script[EQ2Bot].Variable[PathType]}==2
                    {
                    This:SetChecked
                    }
                  </OnLoad>
                  <OnLeftClick>
                    if ${This.Checked}
                    {
                    UIElement[EQ2 Bot].FindUsableChild[Following Frame,Frame]:Hide
                    Script[EQ2Bot].Variable[PathType]:Set[2]
                    LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[What Path Type (0-4)?,2]
                    Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                    UIElement[Manual@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:UnsetChecked
                    UIElement[Minimum@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:UnsetChecked
                    UIElement[Dungeon Crawl@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:UnsetChecked
                    UIElement[Auto Hunting@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:UnsetChecked
                    }
                    else
                    {
                    if !${UIElement[Manual@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot].Checked}
                    UIElement[Manual@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:LeftClick
                    }
                  </OnLeftClick>
                </checkbox>
                <checkbox Name='Dungeon Crawl'>
                  <X>5%</X>
                  <Y>81</Y>
                  <Width>20%</Width>
                  <Height>20</Height>
                  <Text>Dungeon Crawl - Follow Nav Path: Start to Finish (DC)</Text>
                  <OnLoad>
                    if ${Script[EQ2Bot].Variable[PathType]}==3
                    {
                    This:SetChecked
                    }
                  </OnLoad>
                  <OnLeftClick>
                    if ${This.Checked}
                    {
                    UIElement[EQ2 Bot].FindUsableChild[Following Frame,Frame]:Hide
                    Script[EQ2Bot].Variable[PathType]:Set[3]
                    LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[What Path Type (0-4)?,3]
                    Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                    UIElement[Manual@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:UnsetChecked
                    UIElement[Minimum@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:UnsetChecked
                    UIElement[Camp@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:UnsetChecked
                    UIElement[Auto Hunting@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:UnsetChecked
                    }
                    else
                    {
                    if !${UIElement[Manual@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot].Checked}
                    UIElement[Manual@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:LeftClick
                    }
                  </OnLeftClick>
                </checkbox>
                <checkbox Name='Auto Hunting'>
                  <X>5%</X>
                  <Y>101</Y>
                  <Width>20%</Width>
                  <Height>20</Height>
                  <Text>Auto Hunting - Pull nearby Mobs within a Maximum Scan Range (AH)</Text>
                  <OnLoad>
                    if ${Script[EQ2Bot].Variable[PathType]}==4
                    {
                    This:SetChecked
                    }
                  </OnLoad>
                  <OnLeftClick>
                    if ${This.Checked}
                    {
                    UIElement[EQ2 Bot].FindUsableChild[Following Frame,Frame]:Hide
                    Script[EQ2Bot].Variable[PathType]:Set[4]
                    LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[What Path Type (0-4)?,4]
                    Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                    UIElement[Manual@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:UnsetChecked
                    UIElement[Minimum@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:UnsetChecked
                    UIElement[Camp@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:UnsetChecked
                    UIElement[Dungeon Crawl@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:UnsetChecked
                    }
                    else
                    {
                    if !${UIElement[Manual@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot].Checked}
                    UIElement[Manual@Pathing Frame@Main@EQ2Bot Tabs@EQ2 Bot]:LeftClick
                    }
                  </OnLeftClick>
                </checkbox>
              </Children>
            </Frame>
            <Frame Name='Combat Frame'>
              <X>1</X>
              <Y>55%</Y>
              <Height>150</Height>
              <Width>95%</Width>
              <Visible>0</Visible>
              <OnLoad>
              </OnLoad>
              <Children>
                <Text Name='status 3'>
                  <X>5%</X>
                  <Y>25</Y>
                  <Width>90%</Width>
                  <Height>10</Height>
                  <Alignment>Left</Alignment>
                  <Wrap />
                  <Text>Current Action:   ${Script[EQ2Bot].Variable[CurrentAction]}</Text>
                </Text>
                <Text Name='Current Target'>
                  <X>5%</X>
                  <Y>40</Y>
                  <Width>90%</Width>
                  <Height>25</Height>
                  <Alignment>Left</Alignment>
                  <Wrap />
                  <Text>Current Target:   ${If[${Script[EQ2Bot].Variable[MainTank]},${If[${Target(exists)},${Target.Name},No Target]},${If[${Actor[${Script[EQ2Bot].Variable[KillTarget]}].Name(exists)},${Actor[${Script[EQ2Bot].Variable[KillTarget]}].Name},No Target]}]}</Text>
                </Text>
                <!--
								<Text Name='Target Aggro'>
									<X>5%</X>
									<Y>55</Y>
									<Width>40%</Width>
									<Height>25</Height>
									<Alignment>Left</Alignment>
									<Wrap />
									<Text>Aggro Status: ${Actor[${Target.ID}].IsAggro}</Text>
								</Text>
								<Text Name='Target Combat'>
									<X>50%</X>
									<Y>55</Y>
									<Width>40%</Width>
									<Height>25</Height>
									<Alignment>Left</Alignment>
									<Wrap />
									<Text>InCombat: ${Actor[${Target.ID}].InCombatMode}</Text>
								</Text> -->
                <Text Name='Gained XP'>
                  <X>5%</X>
                  <Y>90</Y>
                  <Width>90%</Width>
                  <Height>10</Height>
                  <Alignment>Left</Alignment>
                  <Wrap />
                  <Text>
                    ${Script[eq2bot].Variable[GainedXPString]}
                  </Text>
                </Text>
                <Text Name='Runtime'>
                  <X>55%</X>
                  <Y>90</Y>
                  <Width>90%</Width>
                  <Height>10</Height>
                  <Alignment>Left</Alignment>
                  <Wrap />
                  <Text>Runtime: ${Math.Calc[(${Time.Timestamp}-${LavishSettings[EQ2Bot].FindSet[Character].FindSet[Temporary Settings].FindSetting[StartTime]})/60].Precision[2]} min.</Text>
                </Text>
              </Children>
            </Frame>
            <Commandbutton name='Start EQ2Bot'>
              <X>40%</X>
              <Y>94%</Y>
              <Width>100</Width>
              <Height>20</Height>
              <Text>Start EQ2Bot</Text>
              <OnLeftClick>
                Script[EQ2Bot]:QueueCommand[call StartBot]
              </OnLeftClick>
            </Commandbutton>
            <Commandbutton name='Stop EQ2Bot'>
              <X>15%</X>
              <Y>90%</Y>
              <Width>100</Width>
              <Height>30</Height>
              <Visible>0</Visible>
              <Text>Stop EQ2Bot</Text>
              <OnLeftClick>
                Script[EQ2Bot]:QueueCommand[call StopBot]
              </OnLeftClick>
            </Commandbutton>
            <Commandbutton name='Check Buffs'>
              <X>40%</X>
              <Y>90%</Y>
              <Width>100</Width>
              <Height>30</Height>
              <Visible>0</Visible>
              <Text>Check Buffs</Text>
              <AutoTooltip>'Check Buffs' routine ONCE (Combat)</AutoTooltip>
              <OnLeftClick>
                Script[EQ2Bot]:QueueCommand[call CheckBuffsOnce]
              </OnLeftClick>
            </Commandbutton>
            <Commandbutton name='Pause EQ2Bot'>
              <X>65%</X>
              <Y>90%</Y>
              <Width>100</Width>
              <Height>30</Height>
              <Visible>0</Visible>
              <Text>Pause EQ2Bot</Text>
              <OnLeftClick>
                Script[EQ2Bot]:QueueCommand[call PauseBot]
              </OnLeftClick>
            </Commandbutton>
            <Commandbutton name='Resume EQ2Bot'>
              <X>65%</X>
              <Y>90%</Y>
              <Width>100</Width>
              <Height>30</Height>
              <Visible>0</Visible>
              <Text>Resume EQ2Bot</Text>
              <OnLeftClick>
                Script[EQ2Bot]:QueueCommand[call ResumeBot]
              </OnLeftClick>
            </Commandbutton>




          </Tab>
          <Tab Name='EQ2Bot Options'>
            <Tabcontrol Name='Option Tabs'>
              <X>1%</X>
              <Y>1%</Y>
              <Height>98%</Height>
              <Width>98%</Width>
              <Tabs>
                <Tab Name='Basic Options'>
                  <checkbox Name='AutoSwitch'>
                    <X>5%</X>
                    <Y>10</Y>
                    <Width>30%</Width>
                    <Height>20</Height>
                    <Text>Assist and Switch Targets until 30% HP</Text>
                    <OnLoad>
                      if ${Script[EQ2Bot].Variable[AutoSwitch]}
                      {
                      This:SetChecked
                      }
                    </OnLoad>
                    <OnLeftClick>
                      if ${This.Checked}
                      {
                      Script[EQ2Bot].Variable[AutoSwitch]:Set[TRUE]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Auto Switch Targets when Main Assist Switches?,TRUE]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      }
                      else
                      {
                      Script[EQ2Bot].Variable[AutoSwitch]:Set[FALSE]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Auto Switch Targets when Main Assist Switches?,FALSE]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      }
                    </OnLeftClick>
                  </checkbox>
                  <checkbox Name='AutoMelee'>
                    <X>55%</X>
                    <Y>10</Y>
                    <Width>30%</Width>
                    <Height>20</Height>
                    <Text>Engage in Melee Combat</Text>
                    <OnLoad>
                      if ${Script[EQ2Bot].Variable[AutoMelee]}
                      {
                      This:SetChecked
                      }
                    </OnLoad>
                    <OnLeftClick>
                      if ${This.Checked}
                      {
                      Script[EQ2Bot].Variable[AutoMelee]:Set[TRUE]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Auto Melee,TRUE]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      }
                      else
                      {
                      Script[EQ2Bot].Variable[AutoMelee]:Set[FALSE]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Auto Melee,FALSE]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      }
                    </OnLeftClick>
                  </checkbox>
                  <checkbox Name='PullNonAggro'>
                    <X>5%</X>
                    <Y>30</Y>
                    <Width>30%</Width>
                    <Height>20</Height>
                    <Text>Pull Non Aggro Mobs</Text>
                    <OnLoad>
                      if ${Script[EQ2Bot].Variable[PullNonAggro]}
                      {
                      This:SetChecked
                      }
                    </OnLoad>
                    <OnLeftClick>
                      if ${This.Checked}
                      {
                      Script[EQ2Bot].Variable[PullNonAggro]:Set[TRUE]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Do you want to Pull Non Aggro Mobs?,TRUE]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      }
                      else
                      {
                      Script[EQ2Bot].Variable[PullNonAggro]:Set[FALSE]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Do you want to Pull Non Aggro Mobs?,FALSE]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      }
                    </OnLeftClick>
                  </checkbox>
                  <checkbox Name='AutoLoot'>
                    <X>55%</X>
                    <Y>30</Y>
                    <Width>30%</Width>
                    <Height>20</Height>
                    <Text>Loot Chests (post-combat)</Text>
                    <AutoTooltip>Scouts will disarm prior to opening chests.</AutoTooltip>
                    <OnLoad>
                      if ${Script[EQ2Bot].Variable[AutoLoot]}
                      {
                      This:SetChecked
                      }
                    </OnLoad>
                    <OnLeftClick>
                      if ${This.Checked}
                      {
                      Script[EQ2Bot].Variable[AutoLoot]:Set[TRUE]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Auto Loot Corpses and open Treasure Chests?,TRUE]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      }
                      else
                      {
                      Script[EQ2Bot].Variable[AutoLoot]:Set[FALSE]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Auto Loot Corpses and open Treasure Chests?,FALSE]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      }
                    </OnLeftClick>
                  </checkbox>
                    <checkbox Name='LootCorpses'>
                      <X>55%</X>
                      <Y>50</Y>
                      <Width>30%</Width>
                      <Height>20</Height>
                      <Text>Loot Corpses</Text>
                      <OnLoad>
                        if ${Script[EQ2Bot].Variable[LootCorpses]}
                        {
                        This:SetChecked
                        }
                      </OnLoad>
                      <OnLeftClick>
                        if ${This.Checked}
                        {
                        Script[EQ2Bot].Variable[LootCorpses]:Set[TRUE]
                        LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Loot Corpses?,TRUE]
                        Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                        }
                        else
                        {
                        Script[EQ2Bot].Variable[LootCorpses]:Set[FALSE]
                        LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Loot Corpses?,FALSE]
                        Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                        }
                      </OnLeftClick>
                    </checkbox>
                  <checkbox Name='Priest Power'>
                    <X>5%</X>
                    <Y>50</Y>
                    <Width>30%</Width>
                    <Height>20</Height>
                    <Text>Check if Priest has Power</Text>
                    <OnLoad>
                      if ${Script[EQ2Bot].Variable[CheckPriestPower]}
                      {
                      This:SetChecked
                      }
                    </OnLoad>
                    <OnLeftClick>
                      if ${This.Checked}
                      {
                      Script[EQ2Bot].Variable[CheckPriestPower]:Set[TRUE]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Check if Priest has Power in the Group?,TRUE]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      }
                      else
                      {
                      Script[EQ2Bot].Variable[CheckPriestPower]:Set[FALSE]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Check if Priest has Power in the Group?,FALSE]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      }
                    </OnLeftClick>
                  </checkbox>
                  <Text name='lblLootMethod'>
                    <x>61%</x>
                    <y>70</y>
                    <Height>20</Height>
                    <Width>80</Width>
                    <Alignment>Left</Alignment>
                    <Text>Loot Method:</Text>
                  </Text>
                  <combobox Name='LootMethod'>
                    <X>80%</X>
                    <Y>70</Y>
                    <Width>70</Width>
                    <Height>20</Height>
                    <AutoTooltip>Select the Loot Method</AutoTooltip>
                    <Items>
                      <Item Value='1'>Accept</Item>
                      <Item Value='2'>Decline</Item>
                      <Item Value='3'>Idle</Item>
                    </Items>
                    <OnLoad>
                      This.ItemByText[${LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings].FindSetting[LootMethod]}]:Select
                    </OnLoad>
                    <OnSelect>
                      Script[EQ2Bot].Variable[LootMethod]:Set[${This.SelectedItem.Text}]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[LootMethod,${This.SelectedItem.Text}]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                    </OnSelect>
                    <OnLeftClick></OnLeftClick>
                  </combobox>
                  <checkbox Name='Lore Confirmation'>
                    <X>57%</X>
                    <Y>90</Y>
                    <Width>30%</Width>
                    <Height>20</Height>
                    <Text>Roll on LORE Items</Text>
                    <OnLoad>
                      if ${Script[EQ2Bot].Variable[LoreConfirm]}
                      {
                      This:SetChecked
                      }
                    </OnLoad>
                    <OnLeftClick>
                      if ${This.Checked}
                      {
                      Script[EQ2Bot].Variable[LoreConfirm]:Set[TRUE]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Do you want to Loot Lore Items?,TRUE]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      }
                      else
                      {
                      Script[EQ2Bot].Variable[LoreConfirm]:Set[FALSE]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Do you want to Loot Lore Items?,FALSE]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      }
                    </OnLeftClick>
                  </checkbox>
                  <checkbox Name='NoTrade Confirmation'>
                    <X>57%</X>
                    <Y>110</Y>
                    <Width>30%</Width>
                    <Height>20</Height>
                    <Text>Roll on NOTRADE Items</Text>
                    <OnLoad>
                      if ${Script[EQ2Bot].Variable[NoTradeConfirm]}
                      {
                      This:SetChecked
                      }
                    </OnLoad>
                    <OnLeftClick>
                      if ${This.Checked}
                      {
                      Script[EQ2Bot].Variable[NoTradeConfirm]:Set[TRUE]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Do you want to Loot NoTrade Items?,TRUE]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      }
                      else
                      {
                      Script[EQ2Bot].Variable[NoTradeConfirm]:Set[FALSE]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Do you want to Loot NoTrade Items?,FALSE]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      }
                    </OnLeftClick>
                  </checkbox>
                  <checkbox Name='Loot Previously Collected Shineys'>
                    <X>57%</X>
                    <Y>130</Y>
                    <Width>30%</Width>
                    <Height>20</Height>
                    <Text>Roll on prev. collected Shineys</Text>
                    <OnLoad>
                      if ${Script[EQ2Bot].Variable[LootPrevCollectedShineys]}
                      {
                      This:SetChecked
                      }
                    </OnLoad>
                    <OnLeftClick>
                      if ${This.Checked}
                      {
                      Script[EQ2Bot].Variable[LootPrevCollectedShineys]:Set[TRUE]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Do you want to loot previously collected shineys?,TRUE]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      }
                      else
                      {
                      Script[EQ2Bot].Variable[LootPrevCollectedShineys]:Set[FALSE]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Do you want to loot previously collected shineys?,FALSE]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      }
                    </OnLeftClick>
                  </checkbox>
                  <Text Name='lblOORThreshold'>
                    <X>10%</X>
                    <Y>70</Y>
                    <Width>50%</Width>
                    <Height>20</Height>
                    <Alignment>Left</Alignment>
                    <Text>Out of Range Reaction Distance: ${Script[EQ2Bot].VariableScope.OORThreshold}</Text>
                    <AutoTooltip>
                      When a spell is called and you are out of range of target, the distance to consider safe to move to max cast range.
                      if movement is a concern make this 0 to prevent any movement and remain out of cast range.
                    </AutoTooltip>
                  </Text>
                  <Slider Name='sldOORThreshold'>
                    <X>10%</X>
                    <Y>85</Y>
                    <Width>35%</Width>
                    <Border>0</Border>
                    <Height>20</Height>
                    <Range>75</Range>
                    <OnLoad>
                      Script[EQ2Bot].VariableScope.OORThreshold:Set[${LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings].FindSetting[Out of Range Reaction Distance]}]
                      This:SetValue[${Script[EQ2Bot].Variable[OORThreshold]}]
                    </OnLoad>
                    <OnChange>
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Out of Range Reaction Distance,${This.Value}]
                      Script[EQ2Bot].Variable[OORThreshold]:Set[${This.Value}]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                    </OnChange>
                  </Slider>
                  <checkbox Name='AutoPull'>
                    <X>5%</X>
                    <Y>110</Y>
                    <Width>30%</Width>
                    <Height>20</Height>
                    <Text>Automatically Pull</Text>
                    <OnLoad>
                      if ${Script[EQ2Bot].Variable[AutoPull]}
                      {
                      This:SetChecked
                      UIElement[EQ2 Bot].FindUsableChild[Pull Frame,Frame]:Show
                      if ${Script[EQ2Bot].Variable[PullType].Equal[Bow Pull]}
                      {
                      UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,Frame]:Show
                      UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,Frame]:Hide
                      UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,Frame]:Hide
                      }
                      elseif ${Script[EQ2Bot].Variable[PullType].Equal[Pet Pull]}
                      {
                      UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,Frame]:Show
                      UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,Frame]:Hide
                      UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,Frame]:Hide
                      }
                      elseif ${Script[EQ2Bot].Variable[PullType].Equal[Spell or CA Pull]}
                      {
                      UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,Frame]:Show
                      UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,Frame]:Hide
                      UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,Frame]:Hide
                      }
                      else
                      {
                      UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,Frame]:Hide
                      UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,Frame]:Hide
                      UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,Frame]:Hide
                      }
                      }
                      else
                      {
                      UIElement[EQ2 Bot].FindUsableChild[Pull Frame,Frame]:Hide
                      UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,Frame]:Hide
                      UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,Frame]:Hide
                      UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,Frame]:Hide
                      }
                    </OnLoad>
                    <OnLeftClick>
                      if ${This.Checked}
                      {
                      UIElement[EQ2 Bot].FindUsableChild[Pull Frame,Frame]:Show
                      Script[EQ2Bot].Variable[AutoPull]:Set[TRUE]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Auto Pull,TRUE]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      if ${Script[EQ2Bot].Variable[PullType].Equal[Bow Pull]}
                      {
                      UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,Frame]:Show
                      UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,Frame]:Hide
                      UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,Frame]:Hide
                      }
                      elseif ${Script[EQ2Bot].Variable[PullType].Equal[Pet Pull]}
                      {
                      UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,Frame]:Show
                      UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,Frame]:Hide
                      UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,Frame]:Hide
                      }
                      elseif ${Script[EQ2Bot].Variable[PullType].Equal[Spell or CA Pull]}
                      {
                      UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,Frame]:Show
                      UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,Frame]:Hide
                      UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,Frame]:Hide
                      }
                      else
                      {
                      UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,Frame]:Hide
                      UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,Frame]:Hide
                      UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,Frame]:Hide
                      }
                      }
                      else
                      {
                      UIElement[EQ2 Bot].FindUsableChild[Pull Frame,Frame]:Hide
                      UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,Frame]:Hide
                      UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,Frame]:Hide
                      UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,Frame]:Hide
                      Script[EQ2Bot].Variable[AutoPull]:Set[FALSE]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Auto Pull,FALSE]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      }
                    </OnLeftClick>
                  </checkbox>
                  <Frame Name='Pull Frame'>
                    <X>5%</X>
                    <Y>130</Y>
                    <Visible>0</Visible>
                    <Height>20</Height>
                    <Width>95%</Width>
                    <OnLoad>
                      if ${LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings].FindSetting[Auto Pull]}
                      {
                      UIElement[EQ2 Bot].FindUsableChild[Pull Frame,Frame]:Show
                      }
                      else
                      {
                      UIElement[EQ2 Bot].FindUsableChild[Pull Frame,Frame]:Hide
                      UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,Frame]:Hide
                      UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,Frame]:Hide
                      UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,Frame]:Hide
                      }
                    </OnLoad>
                    <Children>
                      <Text Name='lblPullType'>
                        <x>1</x>
                        <y>3</y>
                        <Width>60</Width>
                        <Height>20</Height>
                        <Alignment>Left</Alignment>
                        <Text>Pull Type:</Text>
                      </Text>
                      <combobox name='PullType'>
                        <x>60</x>
                        <y>1</y>
                        <Width>
                          80
                        </Width>
                        <Height>
                          20
                        </Height>
                        <AutoTooltip>Select the Pull Type</AutoTooltip>
                        <Items>
                          <Item Value='None'>Choose...</Item>
                          <Item Value='PullWithBow'>Bow Pull</Item>
                          <Item Value='PullWithPet'>Pet Pull</Item>
                          <Item Value='PullWithSpell'>Spell or CA Pull</Item>
                        </Items>
                        <OnLoad>
                          This.ItemByText[${LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings].FindSetting[PullType]}]:Select
                          if ${This.SelectedItem.Text.Equal[Bow Pull]}
                          {
                          UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,Frame]:Show
                          UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,Frame]:Hide
                          UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,Frame]:Hide
                          }
                          elseif ${This.SelectedItem.Text.Equal[Pet Pull]}
                          {
                          UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,Frame]:Show
                          UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,Frame]:Hide
                          UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,Frame]:Hide
                          }
                          elseif ${This.SelectedItem.Text.Equal[Spell or CA Pull]}
                          {
                          UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,Frame]:Show
                          UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,Frame]:Hide
                          UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,Frame]:Hide
                          }
                          else
                          {
                          UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,Frame]:Hide
                          UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,Frame]:Hide
                          UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,Frame]:Hide
                          }
                          Script[EQ2Bot].Variable[PullType]:Set[${This.SelectedItem.Text}]
                        </OnLoad>
                        <OnSelect>
                          if ${This.SelectedItem.Text.Equal[Bow Pull]}
                          {
                          UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,Frame]:Show
                          UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,Frame]:Hide
                          UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,Frame]:Hide
                          }
                          elseif ${This.SelectedItem.Text.Equal[Pet Pull]}
                          {
                          UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,Frame]:Show
                          UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,Frame]:Hide
                          UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,Frame]:Hide
                          }
                          elseif ${This.SelectedItem.Text.Equal[Spell or CA Pull]}
                          {
                          UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,Frame]:Show
                          UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,Frame]:Hide
                          UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,Frame]:Hide
                          }
                          else
                          {
                          UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,Frame]:Hide
                          UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,Frame]:Hide
                          UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,Frame]:Hide
                          }
                          Script[EQ2Bot].Variable[PullType]:Set[${This.SelectedItem.Text}]
                          LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[PullType,${This.SelectedItem.Text}]
                          Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                        </OnSelect>
                        <OnLeftClick></OnLeftClick>
                      </combobox>
                    </Children>
                  </Frame>
                  <Frame name='Bow Pull Frame'>
                    <x>5%</x>
                    <y>140</y>
                    <Visible>0</Visible>
                    <Height>40</Height>
                    <Width>95%</Width>
                    <OnLoad>
                      if ${LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings].FindSetting[Auto Pull]}
                      {
                      UIElement[EQ2 Bot].FindUsableChild[Pull Frame,Frame]:Show
                      }
                      else
                      {
                      UIElement[EQ2 Bot].FindUsableChild[Pull Frame,Frame]:Hide
                      UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,Frame]:Hide
                      UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,Frame]:Hide
                      UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,Frame]:Hide
                      }
                      if ${LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings].FindSetting[PullType].String.Equal[Bow Pull]}
                      {
                      UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,Frame]:Show
                      }
                      else
                      {
                      UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,Frame]:Hide
                      }
                    </OnLoad>
                    <Children>
                      <Text Name='PullRange Text'>
                        <X>57%</X>
                        <Y>1</Y>
                        <Width>70</Width>
                        <Height>20</Height>
                        <Alignment>Left</Alignment>
                        <Text>Pull Range:</Text>
                      </Text>
                      <Textentry Name='PullRange'>
                        <X>71%</X>
                        <Y>1</Y>
                        <Width>30</Width>
                        <Height>15</Height>
                        <Color>FFDDBB00</Color>
                        <MaxLength>4</MaxLength>
                        <OnLoad>This:SetText[${Script[EQ2Bot].Variable[PullRange]}]</OnLoad>
                        <OnChange>
                          Script[EQ2Bot].Variable[PullRange]:Set[${This.Text}]
                          LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting["What RANGE to PULL from?",${This.Text}]
                          Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                        </OnChange>
                      </Textentry>
                      <Text Name='PowerCheck Text'>
                        <X>6%</X>
                        <Y>20</Y>
                        <Width>200</Width>
                        <Height>20</Height>
                        <Alignment>Left</Alignment>
                        <Text>Pull when power is at least</Text>
                      </Text>
                      <Textentry Name='PowerCheck'>
                        <X>42%</X>
                        <Y>20</Y>
                        <Width>30</Width>
                        <Height>15</Height>
                        <Color>FFDDBB00</Color>
                        <MaxLength>5</MaxLength>
                        <OnLoad>This:SetText[${Script[EQ2Bot].Variable[PowerCheck]}]</OnLoad>
                        <OnChange>
                          Script[EQ2Bot].Variable[PowerCheck]:Set[${This.Text}]
                          LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Minimum Power the puller will pull at?,${This.Text}]
                          Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                        </OnChange>
                      </Textentry>
                      <Text Name='HealthCheck Text1'>
                        <X>49%</X>
                        <Y>20</Y>
                        <Width>200</Width>
                        <Height>20</Height>
                        <Alignment>Left</Alignment>
                        <Text>% and Health is at least</Text>
                      </Text>
                      <Textentry Name='HealthCheck'>
                        <X>80%</X>
                        <Y>20</Y>
                        <Width>30</Width>
                        <Height>15</Height>
                        <Color>FFDDBB00</Color>
                        <MaxLength>5</MaxLength>
                        <OnLoad>This:SetText[${Script[EQ2Bot].Variable[HealthCheck]}]</OnLoad>
                        <OnChange>
                          Script[EQ2Bot].Variable[HealthCheck]:Set[${This.Text}]
                          LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Minimum Health the puller will pull at?,${This.Text}]
                          Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                        </OnChange>
                      </Textentry>
                      <Text Name='HealthCheck Text2'>
                        <X>88%</X>
                        <Y>20</Y>
                        <Width>70</Width>
                        <Height>20</Height>
                        <Alignment>Left</Alignment>
                        <Text>%</Text>
                      </Text>
                    </Children>
                  </Frame>
                  <Frame name='Pet Pull Frame'>
                    <x>5%</x>
                    <y>140</y>
                    <Visible>0</Visible>
                    <Height>40</Height>
                    <Width>95%</Width>
                    <OnLoad>
                      if ${LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings].FindSetting[Auto Pull]}
                      {
                      UIElement[EQ2 Bot].FindUsableChild[Pull Frame,Frame]:Show
                      }
                      else
                      {
                      UIElement[EQ2 Bot].FindUsableChild[Pull Frame,Frame]:Hide
                      UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,Frame]:Hide
                      UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,Frame]:Hide
                      UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,Frame]:Hide
                      }
                      if ${LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings].FindSetting[PullType].String.Equal[Pet Pull]}
                      {
                      UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,Frame]:Show
                      }
                      else
                      {
                      UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,Frame]:Hide
                      }
                    </OnLoad>
                    <Children>
                      <Text Name='PullRange Text'>
                        <X>57%</X>
                        <Y>1</Y>
                        <Width>70</Width>
                        <Height>20</Height>
                        <Alignment>Left</Alignment>
                        <Text>Pull Range:</Text>
                      </Text>
                      <Textentry Name='PullRange'>
                        <X>71%</X>
                        <Y>1</Y>
                        <Width>30</Width>
                        <Height>15</Height>
                        <Color>FFDDBB00</Color>
                        <MaxLength>4</MaxLength>
                        <OnLoad>This:SetText[${Script[EQ2Bot].Variable[PullRange]}]</OnLoad>
                        <OnChange>
                          Script[EQ2Bot].Variable[PullRange]:Set[${This.Text}]
                          LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting["What RANGE to PULL from?",${This.Text}]
                          Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                        </OnChange>
                      </Textentry>
                      <Text Name='PowerCheck Text'>
                        <X>6%</X>
                        <Y>20</Y>
                        <Width>200</Width>
                        <Height>20</Height>
                        <Alignment>Left</Alignment>
                        <Text>Pull when power is at least</Text>
                      </Text>
                      <Textentry Name='PowerCheck'>
                        <X>42%</X>
                        <Y>20</Y>
                        <Width>30</Width>
                        <Height>15</Height>
                        <Color>FFDDBB00</Color>
                        <MaxLength>5</MaxLength>
                        <OnLoad>This:SetText[${Script[EQ2Bot].Variable[PowerCheck]}]</OnLoad>
                        <OnChange>
                          Script[EQ2Bot].Variable[PowerCheck]:Set[${This.Text}]
                          LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Minimum Power the puller will pull at?,${This.Text}]
                          Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                        </OnChange>
                      </Textentry>
                      <Text Name='HealthCheck Text1'>
                        <X>49%</X>
                        <Y>20</Y>
                        <Width>200</Width>
                        <Height>20</Height>
                        <Alignment>Left</Alignment>
                        <Text>% and Health is at least</Text>
                      </Text>
                      <Textentry Name='HealthCheck'>
                        <X>80%</X>
                        <Y>20</Y>
                        <Width>30</Width>
                        <Height>15</Height>
                        <Color>FFDDBB00</Color>
                        <MaxLength>5</MaxLength>
                        <OnLoad>This:SetText[${Script[EQ2Bot].Variable[HealthCheck]}]</OnLoad>
                        <OnChange>
                          Script[EQ2Bot].Variable[HealthCheck]:Set[${This.Text}]
                          LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Minimum Health the puller will pull at?,${This.Text}]
                          Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                        </OnChange>
                      </Textentry>
                      <Text Name='HealthCheck Text2'>
                        <X>88%</X>
                        <Y>20</Y>
                        <Width>70</Width>
                        <Height>20</Height>
                        <Alignment>Left</Alignment>
                        <Text>%</Text>
                      </Text>
                    </Children>
                  </Frame>
                  <Frame name='Spell Pull Frame'>
                    <x>5%</x>
                    <y>150</y>
                    <Visible>0</Visible>
                    <Height>40</Height>
                    <Width>95%</Width>
                    <OnLoad>
                      if ${LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings].FindSetting[Auto Pull]}
                      {
                      UIElement[EQ2 Bot].FindUsableChild[Pull Frame,Frame]:Show
                      }
                      else
                      {
                      UIElement[EQ2 Bot].FindUsableChild[Pull Frame,Frame]:Hide
                      UIElement[EQ2 Bot].FindUsableChild[Bow Pull Frame,Frame]:Hide
                      UIElement[EQ2 Bot].FindUsableChild[Pet Pull Frame,Frame]:Hide
                      UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,Frame]:Hide
                      }
                      if ${LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings].FindSetting[PullType].String.Equal[Spell or CA Pull]}
                      {
                      UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,Frame]:Show
                      }
                      else
                      {
                      UIElement[EQ2 Bot].FindUsableChild[Spell Pull Frame,Frame]:Hide
                      }
                    </OnLoad>
                    <Children>
                      <Text Name='PullSpell Text'>
                        <X>8%</X>
                        <Y>1</Y>
                        <Width>70</Width>
                        <Height>20</Height>
                        <Alignment>Left</Alignment>
                        <Text>Pull Spell:</Text>
                      </Text>
                      <Textentry Name='PullSpell'>
                        <X>20%</X>
                        <Y>1</Y>
                        <Width>120</Width>
                        <Height>15</Height>
                        <Color>FFDDBB00</Color>
                        <MaxLength>30</MaxLength>
                        <OnLoad>This:SetText[${Script[EQ2Bot].Variable[PullSpell]}]</OnLoad>
                      </Textentry>
                      <Commandbutton name='UpdatePullSpell'>
                        <X>47%</X>
                        <Y>1</Y>
                        <Width>35</Width>
                        <Height>15</Height>
                        <Text>Set</Text>
                        <OnLeftClick>
                          if ${Me.Ability[${UIElement[EQ2 Bot].FindUsableChild[PullSpell,Textentry].Text}](exists)}
                          {
                          Script[EQ2Bot].Variable[PullSpell]:Set[${UIElement[EQ2 Bot].FindUsableChild[PullSpell,Textentry].Text}]
                          LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting["What to use when PULLING?",${UIElement[EQ2 Bot].FindUsableChild[PullSpell,Textentry].Text}]
                          UIElement[EQ2 Bot].FindUsableChild[PullSpell,Textentry]:SetText[${LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings].FindSetting[What to use when PULLING?]}]
                          Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                          }
                          else
                          {
                          UIElement[EQ2 Bot].FindUsableChild[PullSpell,Textentry]:SetText[${LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings].FindSetting[What to use when PULLING?]}]
                          }
                        </OnLeftClick>
                      </Commandbutton>
                      <Text Name='PullRange Text'>
                        <X>57%</X>
                        <Y>1</Y>
                        <Width>70</Width>
                        <Height>20</Height>
                        <Alignment>Left</Alignment>
                        <Text>Pull Range:</Text>
                      </Text>
                      <Textentry Name='PullRange'>
                        <X>71%</X>
                        <Y>1</Y>
                        <Width>30</Width>
                        <Height>15</Height>
                        <Color>FFDDBB00</Color>
                        <MaxLength>4</MaxLength>
                        <OnLoad>This:SetText[${Script[EQ2Bot].Variable[PullRange]}]</OnLoad>
                        <OnChange>
                          Script[EQ2Bot].Variable[PullRange]:Set[${This.Text}]
                          LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting["What RANGE to PULL from?",${This.Text}]
                          Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                        </OnChange>
                      </Textentry>
                      <Text Name='PowerCheck Text'>
                        <X>6%</X>
                        <Y>20</Y>
                        <Width>200</Width>
                        <Height>20</Height>
                        <Alignment>Left</Alignment>
                        <Text>Pull when power is at least</Text>
                      </Text>
                      <Textentry Name='PowerCheck'>
                        <X>42%</X>
                        <Y>20</Y>
                        <Width>30</Width>
                        <Height>15</Height>
                        <Color>FFDDBB00</Color>
                        <MaxLength>5</MaxLength>
                        <OnLoad>This:SetText[${Script[EQ2Bot].Variable[PowerCheck]}]</OnLoad>
                        <OnChange>
                          Script[EQ2Bot].Variable[PowerCheck]:Set[${This.Text}]
                          LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Minimum Power the puller will pull at?,${This.Text}]
                          Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                        </OnChange>
                      </Textentry>
                      <Text Name='HealthCheck Text1'>
                        <X>49%</X>
                        <Y>20</Y>
                        <Width>200</Width>
                        <Height>20</Height>
                        <Alignment>Left</Alignment>
                        <Text>% and Health is at least</Text>
                      </Text>
                      <Textentry Name='HealthCheck'>
                        <X>80%</X>
                        <Y>20</Y>
                        <Width>30</Width>
                        <Height>15</Height>
                        <Color>FFDDBB00</Color>
                        <MaxLength>5</MaxLength>
                        <OnLoad>This:SetText[${Script[EQ2Bot].Variable[HealthCheck]}]</OnLoad>
                        <OnChange>
                          Script[EQ2Bot].Variable[HealthCheck]:Set[${This.Text}]
                          LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Minimum Health the puller will pull at?,${This.Text}]
                          Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                        </OnChange>
                      </Textentry>
                      <Text Name='HealthCheck Text2'>
                        <X>88%</X>
                        <Y>20</Y>
                        <Width>70</Width>
                        <Height>20</Height>
                        <Alignment>Left</Alignment>
                        <Text>%</Text>
                      </Text>
                    </Children>
                  </Frame>
                  <Text Name='ScanRange Text'>
                    <X>20</X>
                    <Y>196</Y>
                    <Width>50%</Width>
                    <Height>20</Height>
                    <Alignment>Left</Alignment>
                    <Text>Maximum Scan Range for AH: </Text>
                  </Text>
                  <Textentry Name='ScanRange'>
                    <X>90%</X>
                    <Y>196</Y>
                    <Width>7%</Width>
                    <Height>15</Height>
                    <Color>FFDDBB00</Color>
                    <MaxLength>4</MaxLength>
                    <OnLoad>This:SetText[${Script[EQ2Bot].Variable[ScanRange]}]</OnLoad>
                    <OnChange>
                      variable int Value
                      Value:Set[${This.Text}]
                      if ${Value} &gt;= 50
                      UIElement[EQ2 Bot].FindUsableChild[ScanRange Slider,slider]:SetValue[45]
                      elseif ${Value} &lt;=5
                      UIElement[EQ2 Bot].FindUsableChild[ScanRange Slider,slider]:SetValue[1]
                      else
                      UIElement[EQ2 Bot].FindUsableChild[ScanRange Slider,slider]:SetValue[${Math.Calc[${Value} - 5]}]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[What RANGE to SCAN for Mobs?,${Value}]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      Script[EQ2Bot].Variable[ScanRange]:Set[${Value}]
                    </OnChange>
                  </Textentry>
                  <Slider Name='ScanRange Slider'>
                    <X>51%</X>
                    <Y>193</Y>
                    <Width>35%</Width>
                    <Height>20</Height>
                    <Range>45</Range>
                    <OnLoad>
                      variable int Range
                      Range:Set[${Script[EQ2Bot].VariableScope.ScanRange}]
                      if ${Range} &gt;= 50
                      {
                      This:SetValue[45]
                      }
                      elseif ${Range} &lt;=5
                      {
                      This:SetValue[1]
                      }
                      else
                      {
                      This:SetValue[${Math.Calc[${Range} - 5]}]
                      }
                    </OnLoad>
                    <OnChange>
                      variable int Value
                      Value:Set[${This.Value} + 5]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[What RANGE to SCAN for Mobs?,${Value}]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      Script[EQ2Bot].Variable[ScanRange]:Set[${Value}]
                    </OnChange>
                  </Slider>
                  <Text Name='MARange Text'>
                    <X>20</X>
                    <Y>220</Y>
                    <Width>50%</Width>
                    <Height>20</Height>
                    <Alignment>Left</Alignment>
                    <Text>Maximum Engage Range from Main Assist: </Text>
                  </Text>
                  <Textentry Name='MARange'>
                    <X>90%</X>
                    <Y>220</Y>
                    <Width>7%</Width>
                    <Height>15</Height>
                    <Color>FFDDBB00</Color>
                    <MaxLength>4</MaxLength>
                    <OnLoad>This:SetText[${Script[EQ2Bot].Variable[MARange]}]</OnLoad>
                    <OnChange>
                      variable int Value
                      Value:Set[${This.Text}]
                      if ${Value} &gt;= 50
                      UIElement[EQ2 Bot].FindUsableChild[MARange Slider,slider]:SetValue[45]
                      elseif ${Value} &lt;=5
                      UIElement[EQ2 Bot].FindUsableChild[MARange Slider,slider]:SetValue[1]
                      else
                      UIElement[EQ2 Bot].FindUsableChild[MARange Slider,slider]:SetValue[${Math.Calc[${Value} - 5]}]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[What RANGE to Engage from Main Assist?,${Value}]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      Script[EQ2Bot].Variable[MARange]:Set[${Value}]
                    </OnChange>
                  </Textentry>
                  <Slider Name='MARange Slider'>
                    <X>51%</X>
                    <Y>216</Y>
                    <Width>35%</Width>
                    <Height>20</Height>
                    <Range>45</Range>
                    <OnLoad>
                      variable int Range
                      Range:Set[${Script[EQ2Bot].VariableScope.MARange}]
                      if ${Range} &gt;= 50
                      {
                      This:SetValue[45]
                      }
                      elseif ${Range} &lt;=5
                      {
                      This:SetValue[1]
                      }
                      else
                      {
                      This:SetValue[${Math.Calc[${Range} - 5]}]
                      }
                    </OnLoad>
                    <OnChange>
                      variable int Value
                      Value:Set[${This.Value} + 5]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[What RANGE to Engage from Main Assist?,${Value}]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      Script[EQ2Bot].Variable[MARange]:Set[${Value}]
                    </OnChange>
                  </Slider>
                  <checkbox Name='Close UI'>
                    <X>5%</X>
                    <Y>r22</Y>
                    <Width>30%</Width>
                    <Height>20</Height>
                    <Text>Close the UI after starting EQ2Bot</Text>
                    <OnLoad>
                      if ${Script[EQ2Bot].Variable[CloseUI]}
                      {
                      This:SetChecked
                      }
                    </OnLoad>
                    <OnLeftClick>
                      if ${This.Checked}
                      {
                      Script[EQ2Bot].Variable[CloseUI]:Set[TRUE]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Close the UI after starting EQ2Bot?,TRUE]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      }
                      else
                      {
                      Script[EQ2Bot].Variable[CloseUI]:Set[FALSE]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Close the UI after starting EQ2Bot?,FALSE]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      }
                    </OnLeftClick>
                  </checkbox>
                  <checkbox Name='WipeRevive'>
                    <X>55%</X>
                    <Y>r22</Y>
                    <Width>30%</Width>
                    <Height>20</Height>
                    <Text>Revive on Group Wipe</Text>
                    <OnLoad>
                      if ${Script[EQ2Bot].Variable[WipeRevive]}
                      {
                      This:SetChecked
                      }
                    </OnLoad>
                    <OnLeftClick>
                      if ${This.Checked}
                      {
                      Script[EQ2Bot].Variable[WipeRevive]:Set[TRUE]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Revive on Group Wipe?,TRUE]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      }
                      else
                      {
                      Script[EQ2Bot].Variable[WipeRevive]:Set[FALSE]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Revive on Group Wipe?,FALSE]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      }
                    </OnLeftClick>
                  </checkbox>
                </Tab>
                <Tab Name='Ignore'>
                  <checkbox Name='IgnoreEpic'>
                    <X>5%</X>
                    <Y>10</Y>
                    <Width>30%</Width>
                    <Height>20</Height>
                    <Text>Ignore Epic Encounters</Text>
                    <OnLoad>
                      if ${Script[EQ2Bot].Variable[IgnoreEpic]}
                      {
                      This:SetChecked
                      }
                    </OnLoad>
                    <OnLeftClick>
                      if ${This.Checked}
                      {
                      Script[EQ2Bot].Variable[IgnoreEpic]:Set[TRUE]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Do you want to Ignore Epic Encounters?,TRUE]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      }
                      else
                      {
                      Script[EQ2Bot].Variable[IgnoreEpic]:Set[FALSE]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Do you want to Ignore Epic Encounters?,FALSE]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      }
                    </OnLeftClick>
                  </checkbox>
                  <checkbox Name='IgnoreNamed'>
                    <X>55%</X>
                    <Y>10</Y>
                    <Width>30%</Width>
                    <Height>20</Height>
                    <Text>Ignore Named</Text>
                    <OnLoad>
                      if ${Script[EQ2Bot].Variable[IgnoreNamed]}
                      {
                      This:SetChecked
                      }
                    </OnLoad>
                    <OnLeftClick>
                      if ${This.Checked}
                      {
                      Script[EQ2Bot].Variable[IgnoreNamed]:Set[TRUE]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Do you want to Ignore Named Encounters?,TRUE]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      }
                      else
                      {
                      Script[EQ2Bot].Variable[IgnoreNamed]:Set[FALSE]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Do you want to Ignore Named Encounters?,FALSE]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      }
                    </OnLeftClick>
                  </checkbox>
                  <checkbox Name='IgnoreHeroic'>
                    <X>5%</X>
                    <Y>30</Y>
                    <Width>30%</Width>
                    <Height>20</Height>
                    <Text>Ignore Heroic Encounters</Text>
                    <OnLoad>
                      if ${Script[EQ2Bot].Variable[IgnoreHeroic]}
                      {
                      This:SetChecked
                      }
                    </OnLoad>
                    <OnLeftClick>
                      if ${This.Checked}
                      {
                      Script[EQ2Bot].Variable[IgnoreHeroic]:Set[TRUE]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Do you want to Ignore Heroic Encounters?,TRUE]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      }
                      else
                      {
                      Script[EQ2Bot].Variable[IgnoreHeroic]:Set[FALSE]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Do you want to Ignore Heroic Encounters?,FALSE]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      }
                    </OnLeftClick>
                  </checkbox>
                  <checkbox Name='IgnoreGreyCon'>
                    <X>55%</X>
                    <Y>30</Y>
                    <Width>30%</Width>
                    <Height>20</Height>
                    <Text>Ignore Grey Con Mobs</Text>
                    <OnLoad>
                      if ${Script[EQ2Bot].Variable[IgnoreGreyCon]}
                      {
                      This:SetChecked
                      }
                    </OnLoad>
                    <OnLeftClick>
                      if ${This.Checked}
                      {
                      Script[EQ2Bot].Variable[IgnoreGreyCon]:Set[TRUE]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Do you want to Ignore Grey Con Mobs?,TRUE]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      }
                      else
                      {
                      Script[EQ2Bot].Variable[IgnoreGreyCon]:Set[FALSE]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Do you want to Ignore Grey Con Mobs?,FALSE]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      }
                    </OnLeftClick>
                  </checkbox>
                  <checkbox Name='IgnoreRedCon'>
                    <X>5%</X>
                    <Y>50</Y>
                    <Width>30%</Width>
                    <Height>20</Height>
                    <Text>Ignore Red Con Mobs</Text>
                    <OnLoad>
                      if ${Script[EQ2Bot].Variable[IgnoreRedCon]}
                      {
                      This:SetChecked
                      }
                    </OnLoad>
                    <OnLeftClick>
                      if ${This.Checked}
                      {
                      Script[EQ2Bot].Variable[IgnoreRedCon]:Set[TRUE]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Do you want to Ignore Red Con Mobs?,TRUE]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      }
                      else
                      {
                      Script[EQ2Bot].Variable[IgnoreRedCon]:Set[FALSE]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Do you want to Ignore Red Con Mobs?,FALSE]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      }
                    </OnLeftClick>
                  </checkbox>
                  <checkbox Name='IgnoreGreenCon'>
                    <X>55%</X>
                    <Y>50</Y>
                    <Width>30%</Width>
                    <Height>20</Height>
                    <Text>Ignore Green Con Mobs</Text>
                    <OnLoad>
                      if ${Script[EQ2Bot].Variable[IgnoreGreenCon]}
                      {
                      This:SetChecked
                      }
                    </OnLoad>
                    <OnLeftClick>
                      if ${This.Checked}
                      {
                      Script[EQ2Bot].Variable[IgnoreGreenCon]:Set[TRUE]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Do you want to Ignore Green Con Mobs?,TRUE]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      }
                      else
                      {
                      Script[EQ2Bot].Variable[IgnoreGreenCon]:Set[FALSE]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Do you want to Ignore Green Con Mobs?,FALSE]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      }
                    </OnLeftClick>
                  </checkbox>
                  <checkbox Name='IgnoreOrangeCon'>
                    <X>5%</X>
                    <Y>70</Y>
                    <Width>30%</Width>
                    <Height>20</Height>
                    <Text>Ignore Orange Con Mobs</Text>
                    <OnLoad>
                      if ${Script[EQ2Bot].Variable[IgnoreOrangeCon]}
                      {
                      This:SetChecked
                      }
                    </OnLoad>
                    <OnLeftClick>
                      if ${This.Checked}
                      {
                      Script[EQ2Bot].Variable[IgnoreOrangeCon]:Set[TRUE]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Do you want to Ignore Orange Con Mobs?,TRUE]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      }
                      else
                      {
                      Script[EQ2Bot].Variable[IgnoreOrangeCon]:Set[FALSE]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Do you want to Ignore Orange Con Mobs?,FALSE]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      }
                    </OnLeftClick>
                  </checkbox>
                  <checkbox Name='IgnoreBlueCon'>
                    <X>55%</X>
                    <Y>70</Y>
                    <Width>30%</Width>
                    <Height>20</Height>
                    <Text>Ignore Blue Con Mobs</Text>
                    <OnLoad>
                      if ${Script[EQ2Bot].Variable[IgnoreBlueCon]}
                      {
                      This:SetChecked
                      }
                    </OnLoad>
                    <OnLeftClick>
                      if ${This.Checked}
                      {
                      Script[EQ2Bot].Variable[IgnoreBlueCon]:Set[TRUE]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Do you want to Ignore Blue Con Mobs?,TRUE]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      }
                      else
                      {
                      Script[EQ2Bot].Variable[IgnoreBlueCon]:Set[FALSE]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Do you want to Ignore Blue Con Mobs?,FALSE]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      }
                    </OnLeftClick>
                  </checkbox>
                  <checkbox Name='IgnoreYellowCon'>
                    <X>5%</X>
                    <Y>90</Y>
                    <Width>30%</Width>
                    <Height>20</Height>
                    <Text>Ignore Yellow Con Mobs</Text>
                    <OnLoad>
                      if ${Script[EQ2Bot].Variable[IgnoreYellowCon]}
                      {
                      This:SetChecked
                      }
                    </OnLoad>
                    <OnLeftClick>
                      if ${This.Checked}
                      {
                      Script[EQ2Bot].Variable[IgnoreYellowCon]:Set[TRUE]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Do you want to Ignore Yellow Con Mobs?,TRUE]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      }
                      else
                      {
                      Script[EQ2Bot].Variable[IgnoreYellowCon]:Set[FALSE]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Do you want to Ignore Yellow Con Mobs?,FALSE]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      }
                    </OnLeftClick>
                  </checkbox>
                  <checkbox Name='IgnoreWhiteCon'>
                    <X>55%</X>
                    <Y>90</Y>
                    <Width>30%</Width>
                    <Height>20</Height>
                    <Text>Ignore White Con Mobs</Text>
                    <OnLoad>
                      if ${Script[EQ2Bot].Variable[IgnoreWhiteCon]}
                      {
                      This:SetChecked
                      }
                    </OnLoad>
                    <OnLeftClick>
                      if ${This.Checked}
                      {
                      Script[EQ2Bot].Variable[IgnoreWhiteCon]:Set[TRUE]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Do you want to Ignore White Con Mobs?,TRUE]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      }
                      else
                      {
                      Script[EQ2Bot].Variable[IgnoreWhiteCon]:Set[FALSE]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Do you want to Ignore White Con Mobs?,FALSE]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      }
                    </OnLeftClick>
                  </checkbox>
                  <checkbox Name='IgnoreNPCs'>
                    <X>5%</X>
                    <Y>110</Y>
                    <Width>30%</Width>
                    <Height>20</Height>
                    <Text>Ignore NPCs</Text>
                    <OnLoad>
                      if ${Script[EQ2Bot].Variable[IgnoreNPCs]}
                      {
                      This:SetChecked
                      }
                    </OnLoad>
                    <OnLeftClick>
                      if ${This.Checked}
                      {
                      Script[EQ2Bot].Variable[IgnoreNPCs]:Set[TRUE]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Do you want to Ignore NPCs?,TRUE]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      }
                      else
                      {
                      Script[EQ2Bot].Variable[IgnoreNPCs]:Set[FALSE]
                      LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Do you want to Ignore NPCs?,FALSE]
                      Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                      }
                    </OnLeftClick>
                  </checkbox>
                </Tab>
              </Tabs>
            </Tabcontrol>
          </Tab>
          <Tab Name='Navigation'>
            <Text Name='Zone Name'>
              <X>0</X>
              <Y>10</Y>
              <Width>100%</Width>
              <Height>20</Height>
              <Alignment>Center</Alignment>
              <Text>
                Current Zone: ${Zone.Name}
              </Text>
            </Text>
            <checkbox Name='Camp'>
              <X>20%</X>
              <Y>40</Y>
              <Width>20%</Width>
              <Height>20</Height>
              <Text>Camp Pathing</Text>
              <OnLoad>
                This:SetChecked
              </OnLoad>
              <OnLeftClick>
                This:SetChecked
                UIElement[Dungeon Crawl@Navigation@EQ2Bot Tabs@EQ2 Bot]:UnsetChecked
                Script[EQ2Bot].Variable[CampNav]:Set[TRUE]
                UIElement[Start Nav@Navigation@EQ2Bot Tabs@EQ2 Bot]:Show
                UIElement[Move Start@Navigation@EQ2Bot Tabs@EQ2 Bot]:Hide
              </OnLeftClick>
            </checkbox>
            <checkbox Name='Dungeon Crawl'>
              <X>50%</X>
              <Y>40</Y>
              <Width>20%</Width>
              <Height>20</Height>
              <Text>Dungeon Crawl Pathing</Text>
              <OnLoad>
                This:UnsetChecked
              </OnLoad>
              <OnLeftClick>
                This:SetChecked
                UIElement[Camp@Navigation@EQ2Bot Tabs@EQ2 Bot]:UnsetChecked
                Script[EQ2Bot].Variable[CampNav]:Set[FALSE]
                Script[EQ2Bot]:ExecuteAtom[CheckFinish]
              </OnLeftClick>
            </checkbox>
            <Text Name='Path Type'>
              <X>0</X>
              <Y>40</Y>
              <Width>100%</Width>
              <Height>20</Height>
              <Alignment>Center</Alignment>
              <Text>
              </Text>
            </Text>
            <Text Name='Camp Count'>
              <X>10%</X>
              <Y>70</Y>
              <Width>90%</Width>
              <Height>20</Height>
              <Alignment>Left</Alignment>
              <Text>
                Camp Locations Found: ${Script[EQ2Bot].VariableScope.CampCount}
              </Text>
            </Text>
            <Text Name='Pull Count'>
              <X>60%</X>
              <Y>70</Y>
              <Width>90%</Width>
              <Height>20</Height>
              <Alignment>Left</Alignment>
              <Text>
                Pull Locations Found: ${Script[EQ2Bot].VariableScope.PullCount}
              </Text>
            </Text>
            <Text Name='Finish Text 1'>
              <X>0</X>
              <Y>70</Y>
              <Width>100%</Width>
              <Height>20</Height>
              <Visible>0</Visible>
              <Alignment>Center</Alignment>
              <Text>
                Finish Region has not been created!
              </Text>
            </Text>
            <Commandbutton name='Move Camp'>
              <X>20%</X>
              <Y>110</Y>
              <Width>24%</Width>
              <Height>20</Height>
              <Text>Move to Camp</Text>
              <OnLeftClick>
                Script[EQ2Bot]:QueueCommand[call MoveToGroup Camp]
              </OnLeftClick>
            </Commandbutton>
            <Commandbutton name='Move Start'>
              <X>20%</X>
              <Y>110</Y>
              <Width>24%</Width>
              <Height>20</Height>
              <Visible>0</Visible>
              <Text>Move to Start</Text>
              <OnLeftClick>
                Script[EQ2Bot]:QueueCommand[call MoveToGroup Start]
              </OnLeftClick>
            </Commandbutton>
            <Commandbutton name='Clear Path'>
              <X>55%</X>
              <Y>110</Y>
              <Width>24%</Width>
              <Height>20</Height>
              <Text>Clear Navigation</Text>
              <OnLeftClick>
                Script[EQ2Bot]:ExecuteAtom[ClearPath]
              </OnLeftClick>
            </Commandbutton>
            <Text Name='Start Text'>
              <X>0</X>
              <Y>150</Y>
              <Width>100%</Width>
              <Height>20</Height>
              <Alignment>Center</Alignment>
              <Text>
              </Text>
            </Text>
            <Text Name='Warning Text'>
              <X>0</X>
              <Y>220</Y>
              <Visible>0</Visible>
              <Width>100%</Width>
              <Height>20</Height>
              <Alignment>Center</Alignment>
              <Text>
                Warning: Clicking Start Pather will create a new Camp Location
              </Text>
            </Text>
            <Commandbutton name='Add Pull Region'>
              <X>35%</X>
              <Y>120</Y>
              <Width>25%</Width>
              <Height>20</Height>
              <Visible>0</Visible>
              <Text>Add Pull Region</Text>
              <OnLeftClick>
                Script[EQ2Bot]:QueueCommand[call AddPullRegion]
              </OnLeftClick>
            </Commandbutton>
            <Commandbutton name='Finish'>
              <X>47%</X>
              <Y>100</Y>
              <Width>20%</Width>
              <Height>20</Height>
              <Visible>0</Visible>
              <Text>Create Finish</Text>
              <OnLeftClick>
                Script[EQ2Bot]:ExecuteAtom[CreateFinish]
              </OnLeftClick>
            </Commandbutton>
            <Text Name='Finish Text 2'>
              <X>0</X>
              <Y>70</Y>
              <Visible>0</Visible>
              <Width>100%</Width>
              <Height>20</Height>
              <Alignment>Center</Alignment>
              <Text>
                Finish Region has been created!!
              </Text>
            </Text>
            <Commandbutton name='Include'>
              <X>78%</X>
              <Y>150</Y>
              <Width>12%</Width>
              <Height>20</Height>
              <Visible>0</Visible>
              <Text>Include</Text>
              <AutoTooltip>Include the selected POI</AutoTooltip>
              <OnLeftClick>
                Script[EQ2Bot]:ExecuteAtom[IncludePOI]
              </OnLeftClick>
            </Commandbutton>
            <Commandbutton name='Exclude'>
              <X>78%</X>
              <Y>180</Y>
              <Width>12%</Width>
              <Height>20</Height>
              <Visible>0</Visible>
              <Text>Exclude</Text>
              <AutoTooltip>Exclude the selected POI</AutoTooltip>
              <OnLeftClick>
                Script[EQ2Bot]:ExecuteAtom[ExcludePOI]
              </OnLeftClick>
            </Commandbutton>
            <Commandbutton name='Save Path Camp'>
              <X>18%</X>
              <Y>180</Y>
              <Width>22%</Width>
              <Height>20</Height>
              <Visible>0</Visible>
              <Text>Save Navigation</Text>
              <OnLeftClick>
                Script[EQ2Bot]:ExecuteAtom[SavePath]
              </OnLeftClick>
            </Commandbutton>
            <Commandbutton name='End Path Camp'>
              <X>55%</X>
              <Y>180</Y>
              <Width>20%</Width>
              <Height>20</Height>
              <Visible>0</Visible>
              <Text>End Pather</Text>
              <OnLeftClick>
                Script[EQ2Bot]:ExecuteAtom[EndPath]
              </OnLeftClick>
            </Commandbutton>
            <Commandbutton name='Start Nav'>
              <X>38%</X>
              <Y>180</Y>
              <Width>20%</Width>
              <Height>20</Height>
              <Text>Start Pather</Text>
              <OnLeftClick>
                Script[EQ2Bot]:ExecuteAtom[StartPather]
              </OnLeftClick>
            </Commandbutton>
            <Commandbutton name='Save Path DC'>
              <X>15%</X>
              <Y>240</Y>
              <Width>22%</Width>
              <Height>20</Height>
              <Visible>0</Visible>
              <Text>Save Navigation</Text>
              <OnLeftClick>
                Script[EQ2Bot]:ExecuteAtom[SavePath]
              </OnLeftClick>
            </Commandbutton>
            <Commandbutton name='End Path DC'>
              <X>50%</X>
              <Y>240</Y>
              <Width>20%</Width>
              <Height>20</Height>
              <Visible>0</Visible>
              <Text>End Pather</Text>
              <OnLeftClick>
                Script[EQ2Bot]:ExecuteAtom[EndPath]
              </OnLeftClick>
            </Commandbutton>
            <Commandbutton name='Add POI'>
              <X>18%</X>
              <Y>100</Y>
              <Width>15%</Width>
              <Height>20</Height>
              <Visible>0</Visible>
              <Text>Add POI</Text>
              <AutoTooltip>Add a Point of Interest</AutoTooltip>
              <OnLeftClick>
                Script[EQ2Bot]:QueueCommand[call AddPOI]
              </OnLeftClick>
            </Commandbutton>
            <Listbox Name='POI List'>
              <X>10%</X>
              <Y>125</Y>
              <Width>65%</Width>
              <Height>35%</Height>
              <Visible>0</Visible>
              <Font>
                <Name>terminal</Name>
                <Size>12</Size>
              </Font>
              <Texture />
              <SelectMultiple>0</SelectMultiple>
              <SelectionColor>FF002026</SelectionColor>
              <Sort>User</Sort>
              <AutoTooltip>Click and drag a POI to change its priority</AutoTooltip>
            </Listbox>
            <Text Name='Region Size Text'>
              <X>10%</X>
              <Y>270</Y>
              <Width>30%</Width>
              <Height>20</Height>
              <Text>
                Region Size:
              </Text>
            </Text>
            <Textentry Name='Region Size'>
              <X>26%</X>
              <Y>270</Y>
              <Width>5%</Width>
              <Height>15</Height>
              <Color>FFDDBB00</Color>
              <MaxLength>3</MaxLength>
              <OnLoad>This:SetText[${Script[EQ2Bot].Variable[BoxWidth]}]</OnLoad>
              <OnChange>
                LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[Navigation: Size of Box?,${This.Text}]
                Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
                Script[EQ2Bot].Variable[BoxWidth]:Set[${This.Text}]
              </OnChange>
            </Textentry>
            <Text Name='Region Count'>
              <X>40%</X>
              <Y>270</Y>
              <Width>60%</Width>
              <Height>20</Height>
              <Text>
                Number of Regions Created: ${Script[EQ2Bot].VariableScope.RegionCount}
              </Text>
            </Text>
          </Tab>
        </Tabs>
      </Tabcontrol>
    </Children>
  </Window>
</ISUI>