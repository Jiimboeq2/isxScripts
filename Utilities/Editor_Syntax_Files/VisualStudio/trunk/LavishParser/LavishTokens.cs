//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4.1.9004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4.1.9004 Grammars\\LavishTokens.g 2012-04-20 03:47:30

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4.1.9004")]
[System.CLSCompliant(false)]
public partial class LavishTokens : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int ARG=4;
	public const int And=5;
	public const int Assign=6;
	public const int Atom=7;
	public const int Band=8;
	public const int Bnegate=9;
	public const int Bor=10;
	public const int COMMAND=11;
	public const int COMMENT=12;
	public const int CONDITION=13;
	public const int Case=14;
	public const int CodeBlock=15;
	public const int Colon=16;
	public const int Comma=17;
	public const int Comparer=18;
	public const int DataCommand=19;
	public const int DeclareVariable=20;
	public const int Default=21;
	public const int Define=22;
	public const int Div=23;
	public const int Do=24;
	public const int Dollar=25;
	public const int Dot=26;
	public const int ESC_SEQ=27;
	public const int EXPONENT=28;
	public const int Echo=29;
	public const int Elipse=30;
	public const int Else=31;
	public const int ElseIf=32;
	public const int EndIf=33;
	public const int EndMac=34;
	public const int EqualTo=35;
	public const int Error=36;
	public const int FLOAT=37;
	public const int For=38;
	public const int Function=39;
	public const int GreaterThan=40;
	public const int GreaterThanEqual=41;
	public const int HEX_DIGIT=42;
	public const int ID=43;
	public const int INT=44;
	public const int If=45;
	public const int IfDef=46;
	public const int IfNDef=47;
	public const int Include=48;
	public const int Inherits=49;
	public const int LCurly=50;
	public const int LParen=51;
	public const int LSquare=52;
	public const int LeftShift=53;
	public const int LessThan=54;
	public const int LessThanEqual=55;
	public const int MATH=56;
	public const int Macro=57;
	public const int Member=58;
	public const int Method=59;
	public const int Minus=60;
	public const int Modu=61;
	public const int Mult=62;
	public const int Negate=63;
	public const int NewLine=64;
	public const int NotEqualTo=65;
	public const int OCTAL_ESC=66;
	public const int ObjectDef=67;
	public const int Or=68;
	public const int Other=69;
	public const int Param=70;
	public const int Params=71;
	public const int Plus=72;
	public const int PreElse=73;
	public const int PreElseIf=74;
	public const int PreIf=75;
	public const int Quote=76;
	public const int RCurly=77;
	public const int RParen=78;
	public const int RSquare=79;
	public const int Returns=80;
	public const int RightShift=81;
	public const int STRING=82;
	public const int Scope=83;
	public const int Script=84;
	public const int Semi=85;
	public const int Switch=86;
	public const int Type=87;
	public const int UNICODE_ESC=88;
	public const int Unmac=89;
	public const int Variable=90;
	public const int VariableCase=91;
	public const int WS=92;
	public const int While=93;
	public const int Xor=94;

    // delegates
    // delegators

	public LavishTokens()
	{
		OnCreated();
	}

	public LavishTokens(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public LavishTokens(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "Grammars\\LavishTokens.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_STRING();
	partial void LeaveRule_STRING();

	// $ANTLR start "STRING"
	[GrammarRule("STRING")]
	private void mSTRING()
	{
		EnterRule_STRING();
		EnterRule("STRING", 1);
		TraceIn("STRING", 1);
		try
		{
			// Grammars\\LavishTokens.g:6:8: ()
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:7:2: 
			{
			}

		}
		finally
		{
			TraceOut("STRING", 1);
			LeaveRule("STRING", 1);
			LeaveRule_STRING();
		}
	}
	// $ANTLR end "STRING"

	partial void EnterRule_CodeBlock();
	partial void LeaveRule_CodeBlock();

	// $ANTLR start "CodeBlock"
	[GrammarRule("CodeBlock")]
	private void mCodeBlock()
	{
		EnterRule_CodeBlock();
		EnterRule("CodeBlock", 2);
		TraceIn("CodeBlock", 2);
		try
		{
			// Grammars\\LavishTokens.g:9:10: ()
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:10:2: 
			{
			}

		}
		finally
		{
			TraceOut("CodeBlock", 2);
			LeaveRule("CodeBlock", 2);
			LeaveRule_CodeBlock();
		}
	}
	// $ANTLR end "CodeBlock"

	partial void EnterRule_MATH();
	partial void LeaveRule_MATH();

	// $ANTLR start "MATH"
	[GrammarRule("MATH")]
	private void mMATH()
	{
		EnterRule_MATH();
		EnterRule("MATH", 3);
		TraceIn("MATH", 3);
		try
		{
			// Grammars\\LavishTokens.g:12:6: ()
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:13:2: 
			{
			}

		}
		finally
		{
			TraceOut("MATH", 3);
			LeaveRule("MATH", 3);
			LeaveRule_MATH();
		}
	}
	// $ANTLR end "MATH"

	partial void EnterRule_Script();
	partial void LeaveRule_Script();

	// $ANTLR start "Script"
	[GrammarRule("Script")]
	private void mScript()
	{
		EnterRule_Script();
		EnterRule("Script", 4);
		TraceIn("Script", 4);
		try
		{
			// Grammars\\LavishTokens.g:15:8: ()
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:16:2: 
			{
			}

		}
		finally
		{
			TraceOut("Script", 4);
			LeaveRule("Script", 4);
			LeaveRule_Script();
		}
	}
	// $ANTLR end "Script"

	partial void EnterRule_DataCommand();
	partial void LeaveRule_DataCommand();

	// $ANTLR start "DataCommand"
	[GrammarRule("DataCommand")]
	private void mDataCommand()
	{
		EnterRule_DataCommand();
		EnterRule("DataCommand", 5);
		TraceIn("DataCommand", 5);
		try
		{
			// Grammars\\LavishTokens.g:19:2: ()
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:20:2: 
			{
			}

		}
		finally
		{
			TraceOut("DataCommand", 5);
			LeaveRule("DataCommand", 5);
			LeaveRule_DataCommand();
		}
	}
	// $ANTLR end "DataCommand"

	partial void EnterRule_CONDITION();
	partial void LeaveRule_CONDITION();

	// $ANTLR start "CONDITION"
	[GrammarRule("CONDITION")]
	private void mCONDITION()
	{
		EnterRule_CONDITION();
		EnterRule("CONDITION", 6);
		TraceIn("CONDITION", 6);
		try
		{
			// Grammars\\LavishTokens.g:23:2: ()
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:24:2: 
			{
			}

		}
		finally
		{
			TraceOut("CONDITION", 6);
			LeaveRule("CONDITION", 6);
			LeaveRule_CONDITION();
		}
	}
	// $ANTLR end "CONDITION"

	partial void EnterRule_Param();
	partial void LeaveRule_Param();

	// $ANTLR start "Param"
	[GrammarRule("Param")]
	private void mParam()
	{
		EnterRule_Param();
		EnterRule("Param", 7);
		TraceIn("Param", 7);
		try
		{
			// Grammars\\LavishTokens.g:26:7: ()
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:27:2: 
			{
			}

		}
		finally
		{
			TraceOut("Param", 7);
			LeaveRule("Param", 7);
			LeaveRule_Param();
		}
	}
	// $ANTLR end "Param"

	partial void EnterRule_Params();
	partial void LeaveRule_Params();

	// $ANTLR start "Params"
	[GrammarRule("Params")]
	private void mParams()
	{
		EnterRule_Params();
		EnterRule("Params", 8);
		TraceIn("Params", 8);
		try
		{
			// Grammars\\LavishTokens.g:29:8: ()
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:30:2: 
			{
			}

		}
		finally
		{
			TraceOut("Params", 8);
			LeaveRule("Params", 8);
			LeaveRule_Params();
		}
	}
	// $ANTLR end "Params"

	partial void EnterRule_Type();
	partial void LeaveRule_Type();

	// $ANTLR start "Type"
	[GrammarRule("Type")]
	private void mType()
	{
		EnterRule_Type();
		EnterRule("Type", 9);
		TraceIn("Type", 9);
		try
		{
			// Grammars\\LavishTokens.g:32:6: ()
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:33:2: 
			{
			}

		}
		finally
		{
			TraceOut("Type", 9);
			LeaveRule("Type", 9);
			LeaveRule_Type();
		}
	}
	// $ANTLR end "Type"

	partial void EnterRule_ARG();
	partial void LeaveRule_ARG();

	// $ANTLR start "ARG"
	[GrammarRule("ARG")]
	private void mARG()
	{
		EnterRule_ARG();
		EnterRule("ARG", 10);
		TraceIn("ARG", 10);
		try
		{
			// Grammars\\LavishTokens.g:36:2: ()
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:37:2: 
			{
			}

		}
		finally
		{
			TraceOut("ARG", 10);
			LeaveRule("ARG", 10);
			LeaveRule_ARG();
		}
	}
	// $ANTLR end "ARG"

	partial void EnterRule_Returns();
	partial void LeaveRule_Returns();

	// $ANTLR start "Returns"
	[GrammarRule("Returns")]
	private void mReturns()
	{
		EnterRule_Returns();
		EnterRule("Returns", 11);
		TraceIn("Returns", 11);
		try
		{
			// Grammars\\LavishTokens.g:39:9: ()
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:40:2: 
			{
			}

		}
		finally
		{
			TraceOut("Returns", 11);
			LeaveRule("Returns", 11);
			LeaveRule_Returns();
		}
	}
	// $ANTLR end "Returns"

	partial void EnterRule_COMMAND();
	partial void LeaveRule_COMMAND();

	// $ANTLR start "COMMAND"
	[GrammarRule("COMMAND")]
	private void mCOMMAND()
	{
		EnterRule_COMMAND();
		EnterRule("COMMAND", 12);
		TraceIn("COMMAND", 12);
		try
		{
			// Grammars\\LavishTokens.g:42:9: ()
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:43:2: 
			{
			}

		}
		finally
		{
			TraceOut("COMMAND", 12);
			LeaveRule("COMMAND", 12);
			LeaveRule_COMMAND();
		}
	}
	// $ANTLR end "COMMAND"

	partial void EnterRule_Elipse();
	partial void LeaveRule_Elipse();

	// $ANTLR start "Elipse"
	[GrammarRule("Elipse")]
	private void mElipse()
	{
		EnterRule_Elipse();
		EnterRule("Elipse", 13);
		TraceIn("Elipse", 13);
		try
		{
			int _type = Elipse;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:46:2: ( '...' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:46:4: '...'
			{
			DebugLocation(46, 4);
			Match("..."); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Elipse", 13);
			LeaveRule("Elipse", 13);
			LeaveRule_Elipse();
		}
	}
	// $ANTLR end "Elipse"

	partial void EnterRule_Comparer();
	partial void LeaveRule_Comparer();

	// $ANTLR start "Comparer"
	[GrammarRule("Comparer")]
	private void mComparer()
	{
		EnterRule_Comparer();
		EnterRule("Comparer", 14);
		TraceIn("Comparer", 14);
		try
		{
			int _type = Comparer;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:48:9: ( EqualTo | NotEqualTo | GreaterThan | LessThan | LessThanEqual | GreaterThanEqual )
			int alt1=6;
			try { DebugEnterDecision(1, false);
			switch (input.LA(1))
			{
			case '=':
				{
				alt1 = 1;
				}
				break;
			case '!':
				{
				alt1 = 2;
				}
				break;
			case '>':
				{
				int LA1_2 = input.LA(2);

				if ((LA1_2=='='))
				{
					alt1 = 6;
				}
				else
				{
					alt1 = 3;
				}
				}
				break;
			case '<':
				{
				int LA1_2 = input.LA(2);

				if ((LA1_2=='='))
				{
					alt1 = 5;
				}
				else
				{
					alt1 = 4;
				}
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 1, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\LavishTokens.g:48:11: EqualTo
				{
				DebugLocation(48, 11);
				mEqualTo(); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Grammars\\LavishTokens.g:48:19: NotEqualTo
				{
				DebugLocation(48, 19);
				mNotEqualTo(); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Grammars\\LavishTokens.g:48:30: GreaterThan
				{
				DebugLocation(48, 30);
				mGreaterThan(); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Grammars\\LavishTokens.g:48:42: LessThan
				{
				DebugLocation(48, 42);
				mLessThan(); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Grammars\\LavishTokens.g:48:51: LessThanEqual
				{
				DebugLocation(48, 51);
				mLessThanEqual(); 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Grammars\\LavishTokens.g:48:65: GreaterThanEqual
				{
				DebugLocation(48, 65);
				mGreaterThanEqual(); 

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Comparer", 14);
			LeaveRule("Comparer", 14);
			LeaveRule_Comparer();
		}
	}
	// $ANTLR end "Comparer"

	partial void EnterRule_COMMENT();
	partial void LeaveRule_COMMENT();

	// $ANTLR start "COMMENT"
	[GrammarRule("COMMENT")]
	private void mCOMMENT()
	{
		EnterRule_COMMENT();
		EnterRule("COMMENT", 15);
		TraceIn("COMMENT", 15);
		try
		{
			int _type = COMMENT;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:50:9: ( '/*' ( options {greedy=false; } : . )* '*/' | NewLine ( WS )? Semi (~ ( '\\r' | '\\n' ) )* )
			int alt5=2;
			try { DebugEnterDecision(5, false);
			int LA5_1 = input.LA(1);

			if ((LA5_1=='/'))
			{
				alt5 = 1;
			}
			else if ((LA5_1=='\n'||LA5_1=='\r'||LA5_1=='\\'))
			{
				alt5 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 5, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\LavishTokens.g:50:11: '/*' ( options {greedy=false; } : . )* '*/'
				{
				DebugLocation(50, 11);
				Match("/*"); 

				DebugLocation(50, 16);
				// Grammars\\LavishTokens.g:50:16: ( options {greedy=false; } : . )*
				try { DebugEnterSubRule(2);
				while (true)
				{
					int alt2=2;
					try { DebugEnterDecision(2, false);
					int LA2_1 = input.LA(1);

					if ((LA2_1=='*'))
					{
						int LA2_2 = input.LA(2);

						if ((LA2_2=='/'))
						{
							alt2 = 2;
						}
						else if (((LA2_2>='\u0000' && LA2_2<='.')||(LA2_2>='0' && LA2_2<='\uFFFF')))
						{
							alt2 = 1;
						}


					}
					else if (((LA2_1>='\u0000' && LA2_1<=')')||(LA2_1>='+' && LA2_1<='\uFFFF')))
					{
						alt2 = 1;
					}


					} finally { DebugExitDecision(2); }
					switch ( alt2 )
					{
					case 1:
						DebugEnterAlt(1);
						// Grammars\\LavishTokens.g:50:44: .
						{
						DebugLocation(50, 44);
						MatchAny(); 

						}
						break;

					default:
						goto loop2;
					}
				}

				loop2:
					;

				} finally { DebugExitSubRule(2); }

				DebugLocation(50, 49);
				Match("*/"); 

				DebugLocation(50, 54);
				_channel=Hidden;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Grammars\\LavishTokens.g:51:4: NewLine ( WS )? Semi (~ ( '\\r' | '\\n' ) )*
				{
				DebugLocation(51, 4);
				mNewLine(); 
				DebugLocation(51, 12);
				// Grammars\\LavishTokens.g:51:12: ( WS )?
				int alt3=2;
				try { DebugEnterSubRule(3);
				try { DebugEnterDecision(3, false);
				int LA3_1 = input.LA(1);

				if ((LA3_1=='\t'||LA3_1==' '))
				{
					alt3 = 1;
				}
				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// Grammars\\LavishTokens.g:51:12: WS
					{
					DebugLocation(51, 12);
					mWS(); 

					}
					break;

				}
				} finally { DebugExitSubRule(3); }

				DebugLocation(51, 16);
				mSemi(); 
				DebugLocation(51, 21);
				// Grammars\\LavishTokens.g:51:21: (~ ( '\\r' | '\\n' ) )*
				try { DebugEnterSubRule(4);
				while (true)
				{
					int alt4=2;
					try { DebugEnterDecision(4, false);
					int LA4_1 = input.LA(1);

					if (((LA4_1>='\u0000' && LA4_1<='\t')||(LA4_1>='\u000B' && LA4_1<='\f')||(LA4_1>='\u000E' && LA4_1<='\uFFFF')))
					{
						alt4 = 1;
					}


					} finally { DebugExitDecision(4); }
					switch ( alt4 )
					{
					case 1:
						DebugEnterAlt(1);
						// Grammars\\LavishTokens.g:
						{
						DebugLocation(51, 21);
						input.Consume();


						}
						break;

					default:
						goto loop4;
					}
				}

				loop4:
					;

				} finally { DebugExitSubRule(4); }

				DebugLocation(51, 34);
				_channel=Hidden;

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMENT", 15);
			LeaveRule("COMMENT", 15);
			LeaveRule_COMMENT();
		}
	}
	// $ANTLR end "COMMENT"

	partial void EnterRule_Mult();
	partial void LeaveRule_Mult();

	// $ANTLR start "Mult"
	[GrammarRule("Mult")]
	private void mMult()
	{
		EnterRule_Mult();
		EnterRule("Mult", 16);
		TraceIn("Mult", 16);
		try
		{
			int _type = Mult;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:54:6: ( '*' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:54:8: '*'
			{
			DebugLocation(54, 8);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Mult", 16);
			LeaveRule("Mult", 16);
			LeaveRule_Mult();
		}
	}
	// $ANTLR end "Mult"

	partial void EnterRule_Div();
	partial void LeaveRule_Div();

	// $ANTLR start "Div"
	[GrammarRule("Div")]
	private void mDiv()
	{
		EnterRule_Div();
		EnterRule("Div", 17);
		TraceIn("Div", 17);
		try
		{
			int _type = Div;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:57:5: ( '/' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:57:7: '/'
			{
			DebugLocation(57, 7);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Div", 17);
			LeaveRule("Div", 17);
			LeaveRule_Div();
		}
	}
	// $ANTLR end "Div"

	partial void EnterRule_Plus();
	partial void LeaveRule_Plus();

	// $ANTLR start "Plus"
	[GrammarRule("Plus")]
	private void mPlus()
	{
		EnterRule_Plus();
		EnterRule("Plus", 18);
		TraceIn("Plus", 18);
		try
		{
			int _type = Plus;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:60:6: ( '+' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:60:8: '+'
			{
			DebugLocation(60, 8);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Plus", 18);
			LeaveRule("Plus", 18);
			LeaveRule_Plus();
		}
	}
	// $ANTLR end "Plus"

	partial void EnterRule_Minus();
	partial void LeaveRule_Minus();

	// $ANTLR start "Minus"
	[GrammarRule("Minus")]
	private void mMinus()
	{
		EnterRule_Minus();
		EnterRule("Minus", 19);
		TraceIn("Minus", 19);
		try
		{
			int _type = Minus;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:63:7: ( '-' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:63:9: '-'
			{
			DebugLocation(63, 9);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Minus", 19);
			LeaveRule("Minus", 19);
			LeaveRule_Minus();
		}
	}
	// $ANTLR end "Minus"

	partial void EnterRule_Modu();
	partial void LeaveRule_Modu();

	// $ANTLR start "Modu"
	[GrammarRule("Modu")]
	private void mModu()
	{
		EnterRule_Modu();
		EnterRule("Modu", 20);
		TraceIn("Modu", 20);
		try
		{
			int _type = Modu;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:66:6: ( '%' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:66:8: '%'
			{
			DebugLocation(66, 8);
			Match('%'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Modu", 20);
			LeaveRule("Modu", 20);
			LeaveRule_Modu();
		}
	}
	// $ANTLR end "Modu"

	partial void EnterRule_Xor();
	partial void LeaveRule_Xor();

	// $ANTLR start "Xor"
	[GrammarRule("Xor")]
	private void mXor()
	{
		EnterRule_Xor();
		EnterRule("Xor", 21);
		TraceIn("Xor", 21);
		try
		{
			int _type = Xor;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:69:5: ( '^' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:69:7: '^'
			{
			DebugLocation(69, 7);
			Match('^'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Xor", 21);
			LeaveRule("Xor", 21);
			LeaveRule_Xor();
		}
	}
	// $ANTLR end "Xor"

	partial void EnterRule_Band();
	partial void LeaveRule_Band();

	// $ANTLR start "Band"
	[GrammarRule("Band")]
	private void mBand()
	{
		EnterRule_Band();
		EnterRule("Band", 22);
		TraceIn("Band", 22);
		try
		{
			int _type = Band;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:72:6: ( '&' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:72:8: '&'
			{
			DebugLocation(72, 8);
			Match('&'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Band", 22);
			LeaveRule("Band", 22);
			LeaveRule_Band();
		}
	}
	// $ANTLR end "Band"

	partial void EnterRule_Bor();
	partial void LeaveRule_Bor();

	// $ANTLR start "Bor"
	[GrammarRule("Bor")]
	private void mBor()
	{
		EnterRule_Bor();
		EnterRule("Bor", 23);
		TraceIn("Bor", 23);
		try
		{
			int _type = Bor;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:75:5: ( '|' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:75:7: '|'
			{
			DebugLocation(75, 7);
			Match('|'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Bor", 23);
			LeaveRule("Bor", 23);
			LeaveRule_Bor();
		}
	}
	// $ANTLR end "Bor"

	partial void EnterRule_LeftShift();
	partial void LeaveRule_LeftShift();

	// $ANTLR start "LeftShift"
	[GrammarRule("LeftShift")]
	private void mLeftShift()
	{
		EnterRule_LeftShift();
		EnterRule("LeftShift", 24);
		TraceIn("LeftShift", 24);
		try
		{
			int _type = LeftShift;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:79:2: ( '<<' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:79:4: '<<'
			{
			DebugLocation(79, 4);
			Match("<<"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LeftShift", 24);
			LeaveRule("LeftShift", 24);
			LeaveRule_LeftShift();
		}
	}
	// $ANTLR end "LeftShift"

	partial void EnterRule_RightShift();
	partial void LeaveRule_RightShift();

	// $ANTLR start "RightShift"
	[GrammarRule("RightShift")]
	private void mRightShift()
	{
		EnterRule_RightShift();
		EnterRule("RightShift", 25);
		TraceIn("RightShift", 25);
		try
		{
			int _type = RightShift;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:83:2: ( '>>' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:83:4: '>>'
			{
			DebugLocation(83, 4);
			Match(">>"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RightShift", 25);
			LeaveRule("RightShift", 25);
			LeaveRule_RightShift();
		}
	}
	// $ANTLR end "RightShift"

	partial void EnterRule_Bnegate();
	partial void LeaveRule_Bnegate();

	// $ANTLR start "Bnegate"
	[GrammarRule("Bnegate")]
	private void mBnegate()
	{
		EnterRule_Bnegate();
		EnterRule("Bnegate", 26);
		TraceIn("Bnegate", 26);
		try
		{
			int _type = Bnegate;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:86:9: ( '~' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:86:11: '~'
			{
			DebugLocation(86, 11);
			Match('~'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Bnegate", 26);
			LeaveRule("Bnegate", 26);
			LeaveRule_Bnegate();
		}
	}
	// $ANTLR end "Bnegate"

	partial void EnterRule_Assign();
	partial void LeaveRule_Assign();

	// $ANTLR start "Assign"
	[GrammarRule("Assign")]
	private void mAssign()
	{
		EnterRule_Assign();
		EnterRule("Assign", 27);
		TraceIn("Assign", 27);
		try
		{
			int _type = Assign;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:89:8: ( '=' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:89:10: '='
			{
			DebugLocation(89, 10);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Assign", 27);
			LeaveRule("Assign", 27);
			LeaveRule_Assign();
		}
	}
	// $ANTLR end "Assign"

	partial void EnterRule_EqualTo();
	partial void LeaveRule_EqualTo();

	// $ANTLR start "EqualTo"
	[GrammarRule("EqualTo")]
	private void mEqualTo()
	{
		EnterRule_EqualTo();
		EnterRule("EqualTo", 28);
		TraceIn("EqualTo", 28);
		try
		{
			// Grammars\\LavishTokens.g:91:9: ( '==' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:91:11: '=='
			{
			DebugLocation(91, 11);
			Match("=="); 


			}

		}
		finally
		{
			TraceOut("EqualTo", 28);
			LeaveRule("EqualTo", 28);
			LeaveRule_EqualTo();
		}
	}
	// $ANTLR end "EqualTo"

	partial void EnterRule_NotEqualTo();
	partial void LeaveRule_NotEqualTo();

	// $ANTLR start "NotEqualTo"
	[GrammarRule("NotEqualTo")]
	private void mNotEqualTo()
	{
		EnterRule_NotEqualTo();
		EnterRule("NotEqualTo", 29);
		TraceIn("NotEqualTo", 29);
		try
		{
			// Grammars\\LavishTokens.g:95:2: ( '!=' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:95:4: '!='
			{
			DebugLocation(95, 4);
			Match("!="); 


			}

		}
		finally
		{
			TraceOut("NotEqualTo", 29);
			LeaveRule("NotEqualTo", 29);
			LeaveRule_NotEqualTo();
		}
	}
	// $ANTLR end "NotEqualTo"

	partial void EnterRule_GreaterThan();
	partial void LeaveRule_GreaterThan();

	// $ANTLR start "GreaterThan"
	[GrammarRule("GreaterThan")]
	private void mGreaterThan()
	{
		EnterRule_GreaterThan();
		EnterRule("GreaterThan", 30);
		TraceIn("GreaterThan", 30);
		try
		{
			// Grammars\\LavishTokens.g:99:2: ( '>' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:99:4: '>'
			{
			DebugLocation(99, 4);
			Match('>'); 

			}

		}
		finally
		{
			TraceOut("GreaterThan", 30);
			LeaveRule("GreaterThan", 30);
			LeaveRule_GreaterThan();
		}
	}
	// $ANTLR end "GreaterThan"

	partial void EnterRule_LessThan();
	partial void LeaveRule_LessThan();

	// $ANTLR start "LessThan"
	[GrammarRule("LessThan")]
	private void mLessThan()
	{
		EnterRule_LessThan();
		EnterRule("LessThan", 31);
		TraceIn("LessThan", 31);
		try
		{
			// Grammars\\LavishTokens.g:103:2: ( '<' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:103:4: '<'
			{
			DebugLocation(103, 4);
			Match('<'); 

			}

		}
		finally
		{
			TraceOut("LessThan", 31);
			LeaveRule("LessThan", 31);
			LeaveRule_LessThan();
		}
	}
	// $ANTLR end "LessThan"

	partial void EnterRule_LessThanEqual();
	partial void LeaveRule_LessThanEqual();

	// $ANTLR start "LessThanEqual"
	[GrammarRule("LessThanEqual")]
	private void mLessThanEqual()
	{
		EnterRule_LessThanEqual();
		EnterRule("LessThanEqual", 32);
		TraceIn("LessThanEqual", 32);
		try
		{
			// Grammars\\LavishTokens.g:107:2: ( '<=' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:107:4: '<='
			{
			DebugLocation(107, 4);
			Match("<="); 


			}

		}
		finally
		{
			TraceOut("LessThanEqual", 32);
			LeaveRule("LessThanEqual", 32);
			LeaveRule_LessThanEqual();
		}
	}
	// $ANTLR end "LessThanEqual"

	partial void EnterRule_GreaterThanEqual();
	partial void LeaveRule_GreaterThanEqual();

	// $ANTLR start "GreaterThanEqual"
	[GrammarRule("GreaterThanEqual")]
	private void mGreaterThanEqual()
	{
		EnterRule_GreaterThanEqual();
		EnterRule("GreaterThanEqual", 33);
		TraceIn("GreaterThanEqual", 33);
		try
		{
			// Grammars\\LavishTokens.g:111:2: ( '>=' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:111:4: '>='
			{
			DebugLocation(111, 4);
			Match(">="); 


			}

		}
		finally
		{
			TraceOut("GreaterThanEqual", 33);
			LeaveRule("GreaterThanEqual", 33);
			LeaveRule_GreaterThanEqual();
		}
	}
	// $ANTLR end "GreaterThanEqual"

	partial void EnterRule_Unmac();
	partial void LeaveRule_Unmac();

	// $ANTLR start "Unmac"
	[GrammarRule("Unmac")]
	private void mUnmac()
	{
		EnterRule_Unmac();
		EnterRule("Unmac", 34);
		TraceIn("Unmac", 34);
		try
		{
			int _type = Unmac;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:115:2: ( '#unmac' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:115:4: '#unmac'
			{
			DebugLocation(115, 4);
			Match("#unmac"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Unmac", 34);
			LeaveRule("Unmac", 34);
			LeaveRule_Unmac();
		}
	}
	// $ANTLR end "Unmac"

	partial void EnterRule_Define();
	partial void LeaveRule_Define();

	// $ANTLR start "Define"
	[GrammarRule("Define")]
	private void mDefine()
	{
		EnterRule_Define();
		EnterRule("Define", 35);
		TraceIn("Define", 35);
		try
		{
			int _type = Define;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:119:2: ( '#define' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:119:4: '#define'
			{
			DebugLocation(119, 4);
			Match("#define"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Define", 35);
			LeaveRule("Define", 35);
			LeaveRule_Define();
		}
	}
	// $ANTLR end "Define"

	partial void EnterRule_Macro();
	partial void LeaveRule_Macro();

	// $ANTLR start "Macro"
	[GrammarRule("Macro")]
	private void mMacro()
	{
		EnterRule_Macro();
		EnterRule("Macro", 36);
		TraceIn("Macro", 36);
		try
		{
			int _type = Macro;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:123:2: ( '#macro' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:123:4: '#macro'
			{
			DebugLocation(123, 4);
			Match("#macro"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Macro", 36);
			LeaveRule("Macro", 36);
			LeaveRule_Macro();
		}
	}
	// $ANTLR end "Macro"

	partial void EnterRule_EndMac();
	partial void LeaveRule_EndMac();

	// $ANTLR start "EndMac"
	[GrammarRule("EndMac")]
	private void mEndMac()
	{
		EnterRule_EndMac();
		EnterRule("EndMac", 37);
		TraceIn("EndMac", 37);
		try
		{
			int _type = EndMac;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:127:2: ( '#endmac' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:127:4: '#endmac'
			{
			DebugLocation(127, 4);
			Match("#endmac"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EndMac", 37);
			LeaveRule("EndMac", 37);
			LeaveRule_EndMac();
		}
	}
	// $ANTLR end "EndMac"

	partial void EnterRule_PreIf();
	partial void LeaveRule_PreIf();

	// $ANTLR start "PreIf"
	[GrammarRule("PreIf")]
	private void mPreIf()
	{
		EnterRule_PreIf();
		EnterRule("PreIf", 38);
		TraceIn("PreIf", 38);
		try
		{
			int _type = PreIf;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:131:2: ( '#if' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:131:4: '#if'
			{
			DebugLocation(131, 4);
			Match("#if"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PreIf", 38);
			LeaveRule("PreIf", 38);
			LeaveRule_PreIf();
		}
	}
	// $ANTLR end "PreIf"

	partial void EnterRule_EndIf();
	partial void LeaveRule_EndIf();

	// $ANTLR start "EndIf"
	[GrammarRule("EndIf")]
	private void mEndIf()
	{
		EnterRule_EndIf();
		EnterRule("EndIf", 39);
		TraceIn("EndIf", 39);
		try
		{
			int _type = EndIf;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:135:2: ( '#endif' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:135:4: '#endif'
			{
			DebugLocation(135, 4);
			Match("#endif"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EndIf", 39);
			LeaveRule("EndIf", 39);
			LeaveRule_EndIf();
		}
	}
	// $ANTLR end "EndIf"

	partial void EnterRule_PreElse();
	partial void LeaveRule_PreElse();

	// $ANTLR start "PreElse"
	[GrammarRule("PreElse")]
	private void mPreElse()
	{
		EnterRule_PreElse();
		EnterRule("PreElse", 40);
		TraceIn("PreElse", 40);
		try
		{
			int _type = PreElse;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:139:2: ( '#else' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:139:4: '#else'
			{
			DebugLocation(139, 4);
			Match("#else"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PreElse", 40);
			LeaveRule("PreElse", 40);
			LeaveRule_PreElse();
		}
	}
	// $ANTLR end "PreElse"

	partial void EnterRule_PreElseIf();
	partial void LeaveRule_PreElseIf();

	// $ANTLR start "PreElseIf"
	[GrammarRule("PreElseIf")]
	private void mPreElseIf()
	{
		EnterRule_PreElseIf();
		EnterRule("PreElseIf", 41);
		TraceIn("PreElseIf", 41);
		try
		{
			int _type = PreElseIf;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:143:2: ( '#elseif' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:143:4: '#elseif'
			{
			DebugLocation(143, 4);
			Match("#elseif"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PreElseIf", 41);
			LeaveRule("PreElseIf", 41);
			LeaveRule_PreElseIf();
		}
	}
	// $ANTLR end "PreElseIf"

	partial void EnterRule_IfDef();
	partial void LeaveRule_IfDef();

	// $ANTLR start "IfDef"
	[GrammarRule("IfDef")]
	private void mIfDef()
	{
		EnterRule_IfDef();
		EnterRule("IfDef", 42);
		TraceIn("IfDef", 42);
		try
		{
			int _type = IfDef;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:147:2: ( '#ifdef' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:147:4: '#ifdef'
			{
			DebugLocation(147, 4);
			Match("#ifdef"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IfDef", 42);
			LeaveRule("IfDef", 42);
			LeaveRule_IfDef();
		}
	}
	// $ANTLR end "IfDef"

	partial void EnterRule_IfNDef();
	partial void LeaveRule_IfNDef();

	// $ANTLR start "IfNDef"
	[GrammarRule("IfNDef")]
	private void mIfNDef()
	{
		EnterRule_IfNDef();
		EnterRule("IfNDef", 43);
		TraceIn("IfNDef", 43);
		try
		{
			int _type = IfNDef;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:151:2: ( '#ifndef' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:151:4: '#ifndef'
			{
			DebugLocation(151, 4);
			Match("#ifndef"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IfNDef", 43);
			LeaveRule("IfNDef", 43);
			LeaveRule_IfNDef();
		}
	}
	// $ANTLR end "IfNDef"

	partial void EnterRule_Echo();
	partial void LeaveRule_Echo();

	// $ANTLR start "Echo"
	[GrammarRule("Echo")]
	private void mEcho()
	{
		EnterRule_Echo();
		EnterRule("Echo", 44);
		TraceIn("Echo", 44);
		try
		{
			int _type = Echo;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:155:2: ( '#echo' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:155:4: '#echo'
			{
			DebugLocation(155, 4);
			Match("#echo"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Echo", 44);
			LeaveRule("Echo", 44);
			LeaveRule_Echo();
		}
	}
	// $ANTLR end "Echo"

	partial void EnterRule_Error();
	partial void LeaveRule_Error();

	// $ANTLR start "Error"
	[GrammarRule("Error")]
	private void mError()
	{
		EnterRule_Error();
		EnterRule("Error", 45);
		TraceIn("Error", 45);
		try
		{
			int _type = Error;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:159:2: ( '#error' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:159:4: '#error'
			{
			DebugLocation(159, 4);
			Match("#error"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Error", 45);
			LeaveRule("Error", 45);
			LeaveRule_Error();
		}
	}
	// $ANTLR end "Error"

	partial void EnterRule_Include();
	partial void LeaveRule_Include();

	// $ANTLR start "Include"
	[GrammarRule("Include")]
	private void mInclude()
	{
		EnterRule_Include();
		EnterRule("Include", 46);
		TraceIn("Include", 46);
		try
		{
			int _type = Include;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:163:2: ( '#include' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:163:4: '#include'
			{
			DebugLocation(163, 4);
			Match("#include"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Include", 46);
			LeaveRule("Include", 46);
			LeaveRule_Include();
		}
	}
	// $ANTLR end "Include"

	partial void EnterRule_Negate();
	partial void LeaveRule_Negate();

	// $ANTLR start "Negate"
	[GrammarRule("Negate")]
	private void mNegate()
	{
		EnterRule_Negate();
		EnterRule("Negate", 47);
		TraceIn("Negate", 47);
		try
		{
			int _type = Negate;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:165:8: ( '!' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:165:10: '!'
			{
			DebugLocation(165, 10);
			Match('!'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Negate", 47);
			LeaveRule("Negate", 47);
			LeaveRule_Negate();
		}
	}
	// $ANTLR end "Negate"

	partial void EnterRule_Dollar();
	partial void LeaveRule_Dollar();

	// $ANTLR start "Dollar"
	[GrammarRule("Dollar")]
	private void mDollar()
	{
		EnterRule_Dollar();
		EnterRule("Dollar", 48);
		TraceIn("Dollar", 48);
		try
		{
			int _type = Dollar;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:167:8: ( '$' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:167:10: '$'
			{
			DebugLocation(167, 10);
			Match('$'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Dollar", 48);
			LeaveRule("Dollar", 48);
			LeaveRule_Dollar();
		}
	}
	// $ANTLR end "Dollar"

	partial void EnterRule_LCurly();
	partial void LeaveRule_LCurly();

	// $ANTLR start "LCurly"
	[GrammarRule("LCurly")]
	private void mLCurly()
	{
		EnterRule_LCurly();
		EnterRule("LCurly", 49);
		TraceIn("LCurly", 49);
		try
		{
			int _type = LCurly;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:169:8: ( '{' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:169:10: '{'
			{
			DebugLocation(169, 10);
			Match('{'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LCurly", 49);
			LeaveRule("LCurly", 49);
			LeaveRule_LCurly();
		}
	}
	// $ANTLR end "LCurly"

	partial void EnterRule_RCurly();
	partial void LeaveRule_RCurly();

	// $ANTLR start "RCurly"
	[GrammarRule("RCurly")]
	private void mRCurly()
	{
		EnterRule_RCurly();
		EnterRule("RCurly", 50);
		TraceIn("RCurly", 50);
		try
		{
			int _type = RCurly;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:171:8: ( '}' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:171:10: '}'
			{
			DebugLocation(171, 10);
			Match('}'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RCurly", 50);
			LeaveRule("RCurly", 50);
			LeaveRule_RCurly();
		}
	}
	// $ANTLR end "RCurly"

	partial void EnterRule_LParen();
	partial void LeaveRule_LParen();

	// $ANTLR start "LParen"
	[GrammarRule("LParen")]
	private void mLParen()
	{
		EnterRule_LParen();
		EnterRule("LParen", 51);
		TraceIn("LParen", 51);
		try
		{
			int _type = LParen;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:173:8: ( '(' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:173:10: '('
			{
			DebugLocation(173, 10);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LParen", 51);
			LeaveRule("LParen", 51);
			LeaveRule_LParen();
		}
	}
	// $ANTLR end "LParen"

	partial void EnterRule_Quote();
	partial void LeaveRule_Quote();

	// $ANTLR start "Quote"
	[GrammarRule("Quote")]
	private void mQuote()
	{
		EnterRule_Quote();
		EnterRule("Quote", 52);
		TraceIn("Quote", 52);
		try
		{
			int _type = Quote;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:175:7: ( '\"' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:175:9: '\"'
			{
			DebugLocation(175, 9);
			Match('\"'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Quote", 52);
			LeaveRule("Quote", 52);
			LeaveRule_Quote();
		}
	}
	// $ANTLR end "Quote"

	partial void EnterRule_RParen();
	partial void LeaveRule_RParen();

	// $ANTLR start "RParen"
	[GrammarRule("RParen")]
	private void mRParen()
	{
		EnterRule_RParen();
		EnterRule("RParen", 53);
		TraceIn("RParen", 53);
		try
		{
			int _type = RParen;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:177:8: ( ')' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:177:10: ')'
			{
			DebugLocation(177, 10);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RParen", 53);
			LeaveRule("RParen", 53);
			LeaveRule_RParen();
		}
	}
	// $ANTLR end "RParen"

	partial void EnterRule_ObjectDef();
	partial void LeaveRule_ObjectDef();

	// $ANTLR start "ObjectDef"
	[GrammarRule("ObjectDef")]
	private void mObjectDef()
	{
		EnterRule_ObjectDef();
		EnterRule("ObjectDef", 54);
		TraceIn("ObjectDef", 54);
		try
		{
			int _type = ObjectDef;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:180:2: ( 'objectdef' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:180:4: 'objectdef'
			{
			DebugLocation(180, 4);
			Match("objectdef"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ObjectDef", 54);
			LeaveRule("ObjectDef", 54);
			LeaveRule_ObjectDef();
		}
	}
	// $ANTLR end "ObjectDef"

	partial void EnterRule_Dot();
	partial void LeaveRule_Dot();

	// $ANTLR start "Dot"
	[GrammarRule("Dot")]
	private void mDot()
	{
		EnterRule_Dot();
		EnterRule("Dot", 55);
		TraceIn("Dot", 55);
		try
		{
			int _type = Dot;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:182:5: ( '.' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:182:7: '.'
			{
			DebugLocation(182, 7);
			Match('.'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Dot", 55);
			LeaveRule("Dot", 55);
			LeaveRule_Dot();
		}
	}
	// $ANTLR end "Dot"

	partial void EnterRule_Colon();
	partial void LeaveRule_Colon();

	// $ANTLR start "Colon"
	[GrammarRule("Colon")]
	private void mColon()
	{
		EnterRule_Colon();
		EnterRule("Colon", 56);
		TraceIn("Colon", 56);
		try
		{
			int _type = Colon;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:185:7: ( ':' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:185:9: ':'
			{
			DebugLocation(185, 9);
			Match(':'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Colon", 56);
			LeaveRule("Colon", 56);
			LeaveRule_Colon();
		}
	}
	// $ANTLR end "Colon"

	partial void EnterRule_Comma();
	partial void LeaveRule_Comma();

	// $ANTLR start "Comma"
	[GrammarRule("Comma")]
	private void mComma()
	{
		EnterRule_Comma();
		EnterRule("Comma", 57);
		TraceIn("Comma", 57);
		try
		{
			int _type = Comma;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:188:7: ( ',' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:188:9: ','
			{
			DebugLocation(188, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Comma", 57);
			LeaveRule("Comma", 57);
			LeaveRule_Comma();
		}
	}
	// $ANTLR end "Comma"

	partial void EnterRule_RSquare();
	partial void LeaveRule_RSquare();

	// $ANTLR start "RSquare"
	[GrammarRule("RSquare")]
	private void mRSquare()
	{
		EnterRule_RSquare();
		EnterRule("RSquare", 58);
		TraceIn("RSquare", 58);
		try
		{
			int _type = RSquare;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:191:9: ( ']' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:191:11: ']'
			{
			DebugLocation(191, 11);
			Match(']'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RSquare", 58);
			LeaveRule("RSquare", 58);
			LeaveRule_RSquare();
		}
	}
	// $ANTLR end "RSquare"

	partial void EnterRule_LSquare();
	partial void LeaveRule_LSquare();

	// $ANTLR start "LSquare"
	[GrammarRule("LSquare")]
	private void mLSquare()
	{
		EnterRule_LSquare();
		EnterRule("LSquare", 59);
		TraceIn("LSquare", 59);
		try
		{
			int _type = LSquare;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:194:9: ( '[' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:194:11: '['
			{
			DebugLocation(194, 11);
			Match('['); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LSquare", 59);
			LeaveRule("LSquare", 59);
			LeaveRule_LSquare();
		}
	}
	// $ANTLR end "LSquare"

	partial void EnterRule_Default();
	partial void LeaveRule_Default();

	// $ANTLR start "Default"
	[GrammarRule("Default")]
	private void mDefault()
	{
		EnterRule_Default();
		EnterRule("Default", 60);
		TraceIn("Default", 60);
		try
		{
			int _type = Default;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:197:2: ( 'default' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:197:4: 'default'
			{
			DebugLocation(197, 4);
			Match("default"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Default", 60);
			LeaveRule("Default", 60);
			LeaveRule_Default();
		}
	}
	// $ANTLR end "Default"

	partial void EnterRule_Case();
	partial void LeaveRule_Case();

	// $ANTLR start "Case"
	[GrammarRule("Case")]
	private void mCase()
	{
		EnterRule_Case();
		EnterRule("Case", 61);
		TraceIn("Case", 61);
		try
		{
			int _type = Case;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:201:2: ( 'case' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:201:4: 'case'
			{
			DebugLocation(201, 4);
			Match("case"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Case", 61);
			LeaveRule("Case", 61);
			LeaveRule_Case();
		}
	}
	// $ANTLR end "Case"

	partial void EnterRule_VariableCase();
	partial void LeaveRule_VariableCase();

	// $ANTLR start "VariableCase"
	[GrammarRule("VariableCase")]
	private void mVariableCase()
	{
		EnterRule_VariableCase();
		EnterRule("VariableCase", 62);
		TraceIn("VariableCase", 62);
		try
		{
			int _type = VariableCase;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:205:2: ( 'variablecase' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:205:4: 'variablecase'
			{
			DebugLocation(205, 4);
			Match("variablecase"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("VariableCase", 62);
			LeaveRule("VariableCase", 62);
			LeaveRule_VariableCase();
		}
	}
	// $ANTLR end "VariableCase"

	partial void EnterRule_While();
	partial void LeaveRule_While();

	// $ANTLR start "While"
	[GrammarRule("While")]
	private void mWhile()
	{
		EnterRule_While();
		EnterRule("While", 63);
		TraceIn("While", 63);
		try
		{
			int _type = While;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:209:2: ( 'while' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:209:4: 'while'
			{
			DebugLocation(209, 4);
			Match("while"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("While", 63);
			LeaveRule("While", 63);
			LeaveRule_While();
		}
	}
	// $ANTLR end "While"

	partial void EnterRule_Do();
	partial void LeaveRule_Do();

	// $ANTLR start "Do"
	[GrammarRule("Do")]
	private void mDo()
	{
		EnterRule_Do();
		EnterRule("Do", 64);
		TraceIn("Do", 64);
		try
		{
			int _type = Do;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:213:2: ( 'do' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:213:4: 'do'
			{
			DebugLocation(213, 4);
			Match("do"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Do", 64);
			LeaveRule("Do", 64);
			LeaveRule_Do();
		}
	}
	// $ANTLR end "Do"

	partial void EnterRule_For();
	partial void LeaveRule_For();

	// $ANTLR start "For"
	[GrammarRule("For")]
	private void mFor()
	{
		EnterRule_For();
		EnterRule("For", 65);
		TraceIn("For", 65);
		try
		{
			int _type = For;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:217:2: ( 'for' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:217:4: 'for'
			{
			DebugLocation(217, 4);
			Match("for"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("For", 65);
			LeaveRule("For", 65);
			LeaveRule_For();
		}
	}
	// $ANTLR end "For"

	partial void EnterRule_If();
	partial void LeaveRule_If();

	// $ANTLR start "If"
	[GrammarRule("If")]
	private void mIf()
	{
		EnterRule_If();
		EnterRule("If", 66);
		TraceIn("If", 66);
		try
		{
			int _type = If;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:221:2: ( 'if' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:221:4: 'if'
			{
			DebugLocation(221, 4);
			Match("if"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("If", 66);
			LeaveRule("If", 66);
			LeaveRule_If();
		}
	}
	// $ANTLR end "If"

	partial void EnterRule_ElseIf();
	partial void LeaveRule_ElseIf();

	// $ANTLR start "ElseIf"
	[GrammarRule("ElseIf")]
	private void mElseIf()
	{
		EnterRule_ElseIf();
		EnterRule("ElseIf", 67);
		TraceIn("ElseIf", 67);
		try
		{
			int _type = ElseIf;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:225:2: ( 'elseif' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:225:4: 'elseif'
			{
			DebugLocation(225, 4);
			Match("elseif"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ElseIf", 67);
			LeaveRule("ElseIf", 67);
			LeaveRule_ElseIf();
		}
	}
	// $ANTLR end "ElseIf"

	partial void EnterRule_Else();
	partial void LeaveRule_Else();

	// $ANTLR start "Else"
	[GrammarRule("Else")]
	private void mElse()
	{
		EnterRule_Else();
		EnterRule("Else", 68);
		TraceIn("Else", 68);
		try
		{
			int _type = Else;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:229:2: ( 'else' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:229:4: 'else'
			{
			DebugLocation(229, 4);
			Match("else"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Else", 68);
			LeaveRule("Else", 68);
			LeaveRule_Else();
		}
	}
	// $ANTLR end "Else"

	partial void EnterRule_And();
	partial void LeaveRule_And();

	// $ANTLR start "And"
	[GrammarRule("And")]
	private void mAnd()
	{
		EnterRule_And();
		EnterRule("And", 69);
		TraceIn("And", 69);
		try
		{
			int _type = And;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:233:2: ( '&&' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:233:4: '&&'
			{
			DebugLocation(233, 4);
			Match("&&"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("And", 69);
			LeaveRule("And", 69);
			LeaveRule_And();
		}
	}
	// $ANTLR end "And"

	partial void EnterRule_Or();
	partial void LeaveRule_Or();

	// $ANTLR start "Or"
	[GrammarRule("Or")]
	private void mOr()
	{
		EnterRule_Or();
		EnterRule("Or", 70);
		TraceIn("Or", 70);
		try
		{
			int _type = Or;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:237:2: ( '||' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:237:4: '||'
			{
			DebugLocation(237, 4);
			Match("||"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Or", 70);
			LeaveRule("Or", 70);
			LeaveRule_Or();
		}
	}
	// $ANTLR end "Or"

	partial void EnterRule_Variable();
	partial void LeaveRule_Variable();

	// $ANTLR start "Variable"
	[GrammarRule("Variable")]
	private void mVariable()
	{
		EnterRule_Variable();
		EnterRule("Variable", 71);
		TraceIn("Variable", 71);
		try
		{
			int _type = Variable;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:241:2: ( 'variable' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:241:4: 'variable'
			{
			DebugLocation(241, 4);
			Match("variable"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Variable", 71);
			LeaveRule("Variable", 71);
			LeaveRule_Variable();
		}
	}
	// $ANTLR end "Variable"

	partial void EnterRule_DeclareVariable();
	partial void LeaveRule_DeclareVariable();

	// $ANTLR start "DeclareVariable"
	[GrammarRule("DeclareVariable")]
	private void mDeclareVariable()
	{
		EnterRule_DeclareVariable();
		EnterRule("DeclareVariable", 72);
		TraceIn("DeclareVariable", 72);
		try
		{
			int _type = DeclareVariable;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:245:2: ( 'declarevariable' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:245:4: 'declarevariable'
			{
			DebugLocation(245, 4);
			Match("declarevariable"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DeclareVariable", 72);
			LeaveRule("DeclareVariable", 72);
			LeaveRule_DeclareVariable();
		}
	}
	// $ANTLR end "DeclareVariable"

	partial void EnterRule_Switch();
	partial void LeaveRule_Switch();

	// $ANTLR start "Switch"
	[GrammarRule("Switch")]
	private void mSwitch()
	{
		EnterRule_Switch();
		EnterRule("Switch", 73);
		TraceIn("Switch", 73);
		try
		{
			int _type = Switch;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:249:2: ( 'switch' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:249:4: 'switch'
			{
			DebugLocation(249, 4);
			Match("switch"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Switch", 73);
			LeaveRule("Switch", 73);
			LeaveRule_Switch();
		}
	}
	// $ANTLR end "Switch"

	partial void EnterRule_Function();
	partial void LeaveRule_Function();

	// $ANTLR start "Function"
	[GrammarRule("Function")]
	private void mFunction()
	{
		EnterRule_Function();
		EnterRule("Function", 74);
		TraceIn("Function", 74);
		try
		{
			int _type = Function;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:252:2: ( 'function' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:252:4: 'function'
			{
			DebugLocation(252, 4);
			Match("function"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Function", 74);
			LeaveRule("Function", 74);
			LeaveRule_Function();
		}
	}
	// $ANTLR end "Function"

	partial void EnterRule_Atom();
	partial void LeaveRule_Atom();

	// $ANTLR start "Atom"
	[GrammarRule("Atom")]
	private void mAtom()
	{
		EnterRule_Atom();
		EnterRule("Atom", 75);
		TraceIn("Atom", 75);
		try
		{
			int _type = Atom;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:255:6: ( 'atom' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:255:8: 'atom'
			{
			DebugLocation(255, 8);
			Match("atom"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Atom", 75);
			LeaveRule("Atom", 75);
			LeaveRule_Atom();
		}
	}
	// $ANTLR end "Atom"

	partial void EnterRule_Method();
	partial void LeaveRule_Method();

	// $ANTLR start "Method"
	[GrammarRule("Method")]
	private void mMethod()
	{
		EnterRule_Method();
		EnterRule("Method", 76);
		TraceIn("Method", 76);
		try
		{
			int _type = Method;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:258:8: ( 'method' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:258:10: 'method'
			{
			DebugLocation(258, 10);
			Match("method"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Method", 76);
			LeaveRule("Method", 76);
			LeaveRule_Method();
		}
	}
	// $ANTLR end "Method"

	partial void EnterRule_Member();
	partial void LeaveRule_Member();

	// $ANTLR start "Member"
	[GrammarRule("Member")]
	private void mMember()
	{
		EnterRule_Member();
		EnterRule("Member", 77);
		TraceIn("Member", 77);
		try
		{
			int _type = Member;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:261:8: ( 'member' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:261:10: 'member'
			{
			DebugLocation(261, 10);
			Match("member"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Member", 77);
			LeaveRule("Member", 77);
			LeaveRule_Member();
		}
	}
	// $ANTLR end "Member"

	partial void EnterRule_Scope();
	partial void LeaveRule_Scope();

	// $ANTLR start "Scope"
	[GrammarRule("Scope")]
	private void mScope()
	{
		EnterRule_Scope();
		EnterRule("Scope", 78);
		TraceIn("Scope", 78);
		try
		{
			int _type = Scope;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:264:7: ( 'local' | 'object' | 'script' | 'global' | 'globalkeep' )
			int alt6=5;
			try { DebugEnterDecision(6, false);
			switch (input.LA(1))
			{
			case 'l':
				{
				alt6 = 1;
				}
				break;
			case 'o':
				{
				alt6 = 2;
				}
				break;
			case 's':
				{
				alt6 = 3;
				}
				break;
			case 'g':
				{
				int LA6_2 = input.LA(2);

				if ((LA6_2=='l'))
				{
					int LA6_3 = input.LA(3);

					if ((LA6_3=='o'))
					{
						int LA6_4 = input.LA(4);

						if ((LA6_4=='b'))
						{
							int LA6_5 = input.LA(5);

							if ((LA6_5=='a'))
							{
								int LA6_6 = input.LA(6);

								if ((LA6_6=='l'))
								{
									int LA6_7 = input.LA(7);

									if ((LA6_7=='k'))
									{
										alt6 = 5;
									}
									else
									{
										alt6 = 4;
									}
								}
								else
								{
									NoViableAltException nvae = new NoViableAltException("", 6, 8, input, 6);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 6, 7, input, 5);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 6, 6, input, 4);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 6, 5, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 6, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 6, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\LavishTokens.g:264:9: 'local'
				{
				DebugLocation(264, 9);
				Match("local"); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Grammars\\LavishTokens.g:264:17: 'object'
				{
				DebugLocation(264, 17);
				Match("object"); 


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Grammars\\LavishTokens.g:264:26: 'script'
				{
				DebugLocation(264, 26);
				Match("script"); 


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Grammars\\LavishTokens.g:264:35: 'global'
				{
				DebugLocation(264, 35);
				Match("global"); 


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Grammars\\LavishTokens.g:264:44: 'globalkeep'
				{
				DebugLocation(264, 44);
				Match("globalkeep"); 


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Scope", 78);
			LeaveRule("Scope", 78);
			LeaveRule_Scope();
		}
	}
	// $ANTLR end "Scope"

	partial void EnterRule_Inherits();
	partial void LeaveRule_Inherits();

	// $ANTLR start "Inherits"
	[GrammarRule("Inherits")]
	private void mInherits()
	{
		EnterRule_Inherits();
		EnterRule("Inherits", 79);
		TraceIn("Inherits", 79);
		try
		{
			int _type = Inherits;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:267:2: ( 'inherits' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:267:4: 'inherits'
			{
			DebugLocation(267, 4);
			Match("inherits"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Inherits", 79);
			LeaveRule("Inherits", 79);
			LeaveRule_Inherits();
		}
	}
	// $ANTLR end "Inherits"

	partial void EnterRule_ID();
	partial void LeaveRule_ID();

	// $ANTLR start "ID"
	[GrammarRule("ID")]
	private void mID()
	{
		EnterRule_ID();
		EnterRule("ID", 80);
		TraceIn("ID", 80);
		try
		{
			int _type = ID;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:269:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:269:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
			{
			DebugLocation(269, 7);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(269, 31);
			// Grammars\\LavishTokens.g:269:31: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_1 = input.LA(1);

				if (((LA7_1>='0' && LA7_1<='9')||(LA7_1>='A' && LA7_1<='Z')||LA7_1=='_'||(LA7_1>='a' && LA7_1<='z')))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// Grammars\\LavishTokens.g:
					{
					DebugLocation(269, 31);
					input.Consume();


					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ID", 80);
			LeaveRule("ID", 80);
			LeaveRule_ID();
		}
	}
	// $ANTLR end "ID"

	partial void EnterRule_INT();
	partial void LeaveRule_INT();

	// $ANTLR start "INT"
	[GrammarRule("INT")]
	private void mINT()
	{
		EnterRule_INT();
		EnterRule("INT", 81);
		TraceIn("INT", 81);
		try
		{
			int _type = INT;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:272:5: ( ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:272:7: ( '0' .. '9' )+
			{
			DebugLocation(272, 7);
			// Grammars\\LavishTokens.g:272:7: ( '0' .. '9' )+
			int cnt8=0;
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if (((LA8_1>='0' && LA8_1<='9')))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// Grammars\\LavishTokens.g:
					{
					DebugLocation(272, 7);
					input.Consume();


					}
					break;

				default:
					if (cnt8 >= 1)
						goto loop8;

					EarlyExitException eee8 = new EarlyExitException( 8, input );
					DebugRecognitionException(eee8);
					throw eee8;
				}
				cnt8++;
			}
			loop8:
				;

			} finally { DebugExitSubRule(8); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INT", 81);
			LeaveRule("INT", 81);
			LeaveRule_INT();
		}
	}
	// $ANTLR end "INT"

	partial void EnterRule_NewLine();
	partial void LeaveRule_NewLine();

	// $ANTLR start "NewLine"
	[GrammarRule("NewLine")]
	private void mNewLine()
	{
		EnterRule_NewLine();
		EnterRule("NewLine", 82);
		TraceIn("NewLine", 82);
		try
		{
			int _type = NewLine;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:275:9: ( ( ( '\\\\' )? ( '\\r' )? '\\n' ( WS )? )+ )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:275:11: ( ( '\\\\' )? ( '\\r' )? '\\n' ( WS )? )+
			{
			DebugLocation(275, 11);
			// Grammars\\LavishTokens.g:275:11: ( ( '\\\\' )? ( '\\r' )? '\\n' ( WS )? )+
			int cnt12=0;
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=2;
				try { DebugEnterDecision(12, false);
				int LA12_1 = input.LA(1);

				if ((LA12_1=='\n'||LA12_1=='\r'||LA12_1=='\\'))
				{
					alt12 = 1;
				}


				} finally { DebugExitDecision(12); }
				switch (alt12)
				{
				case 1:
					DebugEnterAlt(1);
					// Grammars\\LavishTokens.g:275:12: ( '\\\\' )? ( '\\r' )? '\\n' ( WS )?
					{
					DebugLocation(275, 12);
					// Grammars\\LavishTokens.g:275:12: ( '\\\\' )?
					int alt9=2;
					try { DebugEnterSubRule(9);
					try { DebugEnterDecision(9, false);
					int LA9_1 = input.LA(1);

					if ((LA9_1=='\\'))
					{
						alt9 = 1;
					}
					} finally { DebugExitDecision(9); }
					switch (alt9)
					{
					case 1:
						DebugEnterAlt(1);
						// Grammars\\LavishTokens.g:275:12: '\\\\'
						{
						DebugLocation(275, 12);
						Match('\\'); 

						}
						break;

					}
					} finally { DebugExitSubRule(9); }

					DebugLocation(275, 17);
					// Grammars\\LavishTokens.g:275:17: ( '\\r' )?
					int alt10=2;
					try { DebugEnterSubRule(10);
					try { DebugEnterDecision(10, false);
					int LA10_1 = input.LA(1);

					if ((LA10_1=='\r'))
					{
						alt10 = 1;
					}
					} finally { DebugExitDecision(10); }
					switch (alt10)
					{
					case 1:
						DebugEnterAlt(1);
						// Grammars\\LavishTokens.g:275:17: '\\r'
						{
						DebugLocation(275, 17);
						Match('\r'); 

						}
						break;

					}
					} finally { DebugExitSubRule(10); }

					DebugLocation(275, 23);
					Match('\n'); 
					DebugLocation(275, 28);
					// Grammars\\LavishTokens.g:275:28: ( WS )?
					int alt11=2;
					try { DebugEnterSubRule(11);
					try { DebugEnterDecision(11, false);
					int LA11_1 = input.LA(1);

					if ((LA11_1=='\t'||LA11_1==' '))
					{
						alt11 = 1;
					}
					} finally { DebugExitDecision(11); }
					switch (alt11)
					{
					case 1:
						DebugEnterAlt(1);
						// Grammars\\LavishTokens.g:275:28: WS
						{
						DebugLocation(275, 28);
						mWS(); 

						}
						break;

					}
					} finally { DebugExitSubRule(11); }


					}
					break;

				default:
					if (cnt12 >= 1)
						goto loop12;

					EarlyExitException eee12 = new EarlyExitException( 12, input );
					DebugRecognitionException(eee12);
					throw eee12;
				}
				cnt12++;
			}
			loop12:
				;

			} finally { DebugExitSubRule(12); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NewLine", 82);
			LeaveRule("NewLine", 82);
			LeaveRule_NewLine();
		}
	}
	// $ANTLR end "NewLine"

	partial void EnterRule_Semi();
	partial void LeaveRule_Semi();

	// $ANTLR start "Semi"
	[GrammarRule("Semi")]
	private void mSemi()
	{
		EnterRule_Semi();
		EnterRule("Semi", 83);
		TraceIn("Semi", 83);
		try
		{
			int _type = Semi;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:277:6: ( ';' )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:277:8: ';'
			{
			DebugLocation(277, 8);
			Match(';'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Semi", 83);
			LeaveRule("Semi", 83);
			LeaveRule_Semi();
		}
	}
	// $ANTLR end "Semi"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 84);
		TraceIn("WS", 84);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:279:4: ( ( ' ' | '\\t' )+ )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:279:6: ( ' ' | '\\t' )+
			{
			DebugLocation(279, 6);
			// Grammars\\LavishTokens.g:279:6: ( ' ' | '\\t' )+
			int cnt13=0;
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_1 = input.LA(1);

				if ((LA13_1=='\t'||LA13_1==' '))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// Grammars\\LavishTokens.g:
					{
					DebugLocation(279, 6);
					input.Consume();


					}
					break;

				default:
					if (cnt13 >= 1)
						goto loop13;

					EarlyExitException eee13 = new EarlyExitException( 13, input );
					DebugRecognitionException(eee13);
					throw eee13;
				}
				cnt13++;
			}
			loop13:
				;

			} finally { DebugExitSubRule(13); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 84);
			LeaveRule("WS", 84);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	partial void EnterRule_FLOAT();
	partial void LeaveRule_FLOAT();

	// $ANTLR start "FLOAT"
	[GrammarRule("FLOAT")]
	private void mFLOAT()
	{
		EnterRule_FLOAT();
		EnterRule("FLOAT", 85);
		TraceIn("FLOAT", 85);
		try
		{
			int _type = FLOAT;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:282:5: ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? | '.' ( '0' .. '9' )+ ( EXPONENT )? | ( '0' .. '9' )+ EXPONENT )
			int alt20=3;
			try { DebugEnterDecision(20, false);
			try
			{
				alt20 = dfa20.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\LavishTokens.g:282:9: ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )?
				{
				DebugLocation(282, 9);
				// Grammars\\LavishTokens.g:282:9: ( '0' .. '9' )+
				int cnt14=0;
				try { DebugEnterSubRule(14);
				while (true)
				{
					int alt14=2;
					try { DebugEnterDecision(14, false);
					int LA14_1 = input.LA(1);

					if (((LA14_1>='0' && LA14_1<='9')))
					{
						alt14 = 1;
					}


					} finally { DebugExitDecision(14); }
					switch (alt14)
					{
					case 1:
						DebugEnterAlt(1);
						// Grammars\\LavishTokens.g:
						{
						DebugLocation(282, 9);
						input.Consume();


						}
						break;

					default:
						if (cnt14 >= 1)
							goto loop14;

						EarlyExitException eee14 = new EarlyExitException( 14, input );
						DebugRecognitionException(eee14);
						throw eee14;
					}
					cnt14++;
				}
				loop14:
					;

				} finally { DebugExitSubRule(14); }

				DebugLocation(282, 21);
				Match('.'); 
				DebugLocation(282, 25);
				// Grammars\\LavishTokens.g:282:25: ( '0' .. '9' )*
				try { DebugEnterSubRule(15);
				while (true)
				{
					int alt15=2;
					try { DebugEnterDecision(15, false);
					int LA15_1 = input.LA(1);

					if (((LA15_1>='0' && LA15_1<='9')))
					{
						alt15 = 1;
					}


					} finally { DebugExitDecision(15); }
					switch ( alt15 )
					{
					case 1:
						DebugEnterAlt(1);
						// Grammars\\LavishTokens.g:
						{
						DebugLocation(282, 25);
						input.Consume();


						}
						break;

					default:
						goto loop15;
					}
				}

				loop15:
					;

				} finally { DebugExitSubRule(15); }

				DebugLocation(282, 37);
				// Grammars\\LavishTokens.g:282:37: ( EXPONENT )?
				int alt16=2;
				try { DebugEnterSubRule(16);
				try { DebugEnterDecision(16, false);
				int LA16_1 = input.LA(1);

				if ((LA16_1=='E'||LA16_1=='e'))
				{
					alt16 = 1;
				}
				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// Grammars\\LavishTokens.g:282:37: EXPONENT
					{
					DebugLocation(282, 37);
					mEXPONENT(); 

					}
					break;

				}
				} finally { DebugExitSubRule(16); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Grammars\\LavishTokens.g:283:9: '.' ( '0' .. '9' )+ ( EXPONENT )?
				{
				DebugLocation(283, 9);
				Match('.'); 
				DebugLocation(283, 13);
				// Grammars\\LavishTokens.g:283:13: ( '0' .. '9' )+
				int cnt17=0;
				try { DebugEnterSubRule(17);
				while (true)
				{
					int alt17=2;
					try { DebugEnterDecision(17, false);
					int LA17_1 = input.LA(1);

					if (((LA17_1>='0' && LA17_1<='9')))
					{
						alt17 = 1;
					}


					} finally { DebugExitDecision(17); }
					switch (alt17)
					{
					case 1:
						DebugEnterAlt(1);
						// Grammars\\LavishTokens.g:
						{
						DebugLocation(283, 13);
						input.Consume();


						}
						break;

					default:
						if (cnt17 >= 1)
							goto loop17;

						EarlyExitException eee17 = new EarlyExitException( 17, input );
						DebugRecognitionException(eee17);
						throw eee17;
					}
					cnt17++;
				}
				loop17:
					;

				} finally { DebugExitSubRule(17); }

				DebugLocation(283, 25);
				// Grammars\\LavishTokens.g:283:25: ( EXPONENT )?
				int alt18=2;
				try { DebugEnterSubRule(18);
				try { DebugEnterDecision(18, false);
				int LA18_1 = input.LA(1);

				if ((LA18_1=='E'||LA18_1=='e'))
				{
					alt18 = 1;
				}
				} finally { DebugExitDecision(18); }
				switch (alt18)
				{
				case 1:
					DebugEnterAlt(1);
					// Grammars\\LavishTokens.g:283:25: EXPONENT
					{
					DebugLocation(283, 25);
					mEXPONENT(); 

					}
					break;

				}
				} finally { DebugExitSubRule(18); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Grammars\\LavishTokens.g:284:9: ( '0' .. '9' )+ EXPONENT
				{
				DebugLocation(284, 9);
				// Grammars\\LavishTokens.g:284:9: ( '0' .. '9' )+
				int cnt19=0;
				try { DebugEnterSubRule(19);
				while (true)
				{
					int alt19=2;
					try { DebugEnterDecision(19, false);
					int LA19_1 = input.LA(1);

					if (((LA19_1>='0' && LA19_1<='9')))
					{
						alt19 = 1;
					}


					} finally { DebugExitDecision(19); }
					switch (alt19)
					{
					case 1:
						DebugEnterAlt(1);
						// Grammars\\LavishTokens.g:
						{
						DebugLocation(284, 9);
						input.Consume();


						}
						break;

					default:
						if (cnt19 >= 1)
							goto loop19;

						EarlyExitException eee19 = new EarlyExitException( 19, input );
						DebugRecognitionException(eee19);
						throw eee19;
					}
					cnt19++;
				}
				loop19:
					;

				} finally { DebugExitSubRule(19); }

				DebugLocation(284, 21);
				mEXPONENT(); 

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FLOAT", 85);
			LeaveRule("FLOAT", 85);
			LeaveRule_FLOAT();
		}
	}
	// $ANTLR end "FLOAT"

	partial void EnterRule_EXPONENT();
	partial void LeaveRule_EXPONENT();

	// $ANTLR start "EXPONENT"
	[GrammarRule("EXPONENT")]
	private void mEXPONENT()
	{
		EnterRule_EXPONENT();
		EnterRule("EXPONENT", 86);
		TraceIn("EXPONENT", 86);
		try
		{
			// Grammars\\LavishTokens.g:289:10: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:289:12: ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+
			{
			DebugLocation(289, 12);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(289, 22);
			// Grammars\\LavishTokens.g:289:22: ( '+' | '-' )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_1 = input.LA(1);

			if ((LA21_1=='+'||LA21_1=='-'))
			{
				alt21 = 1;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\LavishTokens.g:
				{
				DebugLocation(289, 22);
				input.Consume();


				}
				break;

			}
			} finally { DebugExitSubRule(21); }

			DebugLocation(289, 33);
			// Grammars\\LavishTokens.g:289:33: ( '0' .. '9' )+
			int cnt22=0;
			try { DebugEnterSubRule(22);
			while (true)
			{
				int alt22=2;
				try { DebugEnterDecision(22, false);
				int LA22_1 = input.LA(1);

				if (((LA22_1>='0' && LA22_1<='9')))
				{
					alt22 = 1;
				}


				} finally { DebugExitDecision(22); }
				switch (alt22)
				{
				case 1:
					DebugEnterAlt(1);
					// Grammars\\LavishTokens.g:
					{
					DebugLocation(289, 33);
					input.Consume();


					}
					break;

				default:
					if (cnt22 >= 1)
						goto loop22;

					EarlyExitException eee22 = new EarlyExitException( 22, input );
					DebugRecognitionException(eee22);
					throw eee22;
				}
				cnt22++;
			}
			loop22:
				;

			} finally { DebugExitSubRule(22); }


			}

		}
		finally
		{
			TraceOut("EXPONENT", 86);
			LeaveRule("EXPONENT", 86);
			LeaveRule_EXPONENT();
		}
	}
	// $ANTLR end "EXPONENT"

	partial void EnterRule_HEX_DIGIT();
	partial void LeaveRule_HEX_DIGIT();

	// $ANTLR start "HEX_DIGIT"
	[GrammarRule("HEX_DIGIT")]
	private void mHEX_DIGIT()
	{
		EnterRule_HEX_DIGIT();
		EnterRule("HEX_DIGIT", 87);
		TraceIn("HEX_DIGIT", 87);
		try
		{
			// Grammars\\LavishTokens.g:292:11: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:
			{
			DebugLocation(292, 11);
			if ((input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='F')||(input.LA(1)>='a' && input.LA(1)<='f'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("HEX_DIGIT", 87);
			LeaveRule("HEX_DIGIT", 87);
			LeaveRule_HEX_DIGIT();
		}
	}
	// $ANTLR end "HEX_DIGIT"

	partial void EnterRule_ESC_SEQ();
	partial void LeaveRule_ESC_SEQ();

	// $ANTLR start "ESC_SEQ"
	[GrammarRule("ESC_SEQ")]
	private void mESC_SEQ()
	{
		EnterRule_ESC_SEQ();
		EnterRule("ESC_SEQ", 88);
		TraceIn("ESC_SEQ", 88);
		try
		{
			// Grammars\\LavishTokens.g:296:5: ( '\\\\' ( 'b' | 't' | 'n' | '$' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' ) | UNICODE_ESC | OCTAL_ESC )
			int alt23=3;
			try { DebugEnterDecision(23, false);
			int LA23_1 = input.LA(1);

			if ((LA23_1=='\\'))
			{
				switch (input.LA(2))
				{
				case '\"':
				case '$':
				case '\'':
				case '\\':
				case 'b':
				case 'f':
				case 'n':
				case 'r':
				case 't':
					{
					alt23 = 1;
					}
					break;
				case 'u':
					{
					alt23 = 2;
					}
					break;
				case '0':
				case '1':
				case '2':
				case '3':
				case '4':
				case '5':
				case '6':
				case '7':
					{
					alt23 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 23, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 23, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\LavishTokens.g:296:9: '\\\\' ( 'b' | 't' | 'n' | '$' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' )
				{
				DebugLocation(296, 9);
				Match('\\'); 
				DebugLocation(296, 14);
				input.Consume();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Grammars\\LavishTokens.g:297:9: UNICODE_ESC
				{
				DebugLocation(297, 9);
				mUNICODE_ESC(); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Grammars\\LavishTokens.g:298:9: OCTAL_ESC
				{
				DebugLocation(298, 9);
				mOCTAL_ESC(); 

				}
				break;

			}
		}
		finally
		{
			TraceOut("ESC_SEQ", 88);
			LeaveRule("ESC_SEQ", 88);
			LeaveRule_ESC_SEQ();
		}
	}
	// $ANTLR end "ESC_SEQ"

	partial void EnterRule_OCTAL_ESC();
	partial void LeaveRule_OCTAL_ESC();

	// $ANTLR start "OCTAL_ESC"
	[GrammarRule("OCTAL_ESC")]
	private void mOCTAL_ESC()
	{
		EnterRule_OCTAL_ESC();
		EnterRule("OCTAL_ESC", 89);
		TraceIn("OCTAL_ESC", 89);
		try
		{
			// Grammars\\LavishTokens.g:303:5: ( '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) )
			int alt24=3;
			try { DebugEnterDecision(24, false);
			int LA24_1 = input.LA(1);

			if ((LA24_1=='\\'))
			{
				int LA24_2 = input.LA(2);

				if (((LA24_2>='0' && LA24_2<='3')))
				{
					int LA24_3 = input.LA(3);

					if (((LA24_3>='0' && LA24_3<='7')))
					{
						int LA24_4 = input.LA(4);

						if (((LA24_4>='0' && LA24_4<='7')))
						{
							alt24 = 1;
						}
						else
						{
							alt24 = 2;
						}
					}
					else
					{
						alt24 = 3;
					}
				}
				else if (((LA24_2>='4' && LA24_2<='7')))
				{
					int LA24_3 = input.LA(3);

					if (((LA24_3>='0' && LA24_3<='7')))
					{
						alt24 = 2;
					}
					else
					{
						alt24 = 3;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 24, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 24, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\LavishTokens.g:303:9: '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' )
				{
				DebugLocation(303, 9);
				Match('\\'); 
				DebugLocation(303, 14);
				input.Consume();

				DebugLocation(303, 25);
				input.Consume();

				DebugLocation(303, 36);
				input.Consume();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Grammars\\LavishTokens.g:304:9: '\\\\' ( '0' .. '7' ) ( '0' .. '7' )
				{
				DebugLocation(304, 9);
				Match('\\'); 
				DebugLocation(304, 14);
				input.Consume();

				DebugLocation(304, 25);
				input.Consume();


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Grammars\\LavishTokens.g:305:9: '\\\\' ( '0' .. '7' )
				{
				DebugLocation(305, 9);
				Match('\\'); 
				DebugLocation(305, 14);
				input.Consume();


				}
				break;

			}
		}
		finally
		{
			TraceOut("OCTAL_ESC", 89);
			LeaveRule("OCTAL_ESC", 89);
			LeaveRule_OCTAL_ESC();
		}
	}
	// $ANTLR end "OCTAL_ESC"

	partial void EnterRule_UNICODE_ESC();
	partial void LeaveRule_UNICODE_ESC();

	// $ANTLR start "UNICODE_ESC"
	[GrammarRule("UNICODE_ESC")]
	private void mUNICODE_ESC()
	{
		EnterRule_UNICODE_ESC();
		EnterRule("UNICODE_ESC", 90);
		TraceIn("UNICODE_ESC", 90);
		try
		{
			// Grammars\\LavishTokens.g:310:5: ( '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:310:9: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
			{
			DebugLocation(310, 9);
			Match('\\'); 
			DebugLocation(310, 14);
			Match('u'); 
			DebugLocation(310, 18);
			mHEX_DIGIT(); 
			DebugLocation(310, 28);
			mHEX_DIGIT(); 
			DebugLocation(310, 38);
			mHEX_DIGIT(); 
			DebugLocation(310, 48);
			mHEX_DIGIT(); 

			}

		}
		finally
		{
			TraceOut("UNICODE_ESC", 90);
			LeaveRule("UNICODE_ESC", 90);
			LeaveRule_UNICODE_ESC();
		}
	}
	// $ANTLR end "UNICODE_ESC"

	partial void EnterRule_Other();
	partial void LeaveRule_Other();

	// $ANTLR start "Other"
	[GrammarRule("Other")]
	private void mOther()
	{
		EnterRule_Other();
		EnterRule("Other", 91);
		TraceIn("Other", 91);
		try
		{
			int _type = Other;
			int _channel = DefaultTokenChannel;
			// Grammars\\LavishTokens.g:312:7: ( . )
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:312:9: .
			{
			DebugLocation(312, 9);
			MatchAny(); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Other", 91);
			LeaveRule("Other", 91);
			LeaveRule_Other();
		}
	}
	// $ANTLR end "Other"

	public override void mTokens()
	{
		// Grammars\\LavishTokens.g:1:8: ( Elipse | Comparer | COMMENT | Mult | Div | Plus | Minus | Modu | Xor | Band | Bor | LeftShift | RightShift | Bnegate | Assign | Unmac | Define | Macro | EndMac | PreIf | EndIf | PreElse | PreElseIf | IfDef | IfNDef | Echo | Error | Include | Negate | Dollar | LCurly | RCurly | LParen | Quote | RParen | ObjectDef | Dot | Colon | Comma | RSquare | LSquare | Default | Case | VariableCase | While | Do | For | If | ElseIf | Else | And | Or | Variable | DeclareVariable | Switch | Function | Atom | Method | Member | Scope | Inherits | ID | INT | NewLine | Semi | WS | FLOAT | Other )
		int alt25=68;
		try { DebugEnterDecision(25, false);
		try
		{
			alt25 = dfa25.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(25); }
		switch (alt25)
		{
		case 1:
			DebugEnterAlt(1);
			// Grammars\\LavishTokens.g:1:10: Elipse
			{
			DebugLocation(1, 10);
			mElipse(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// Grammars\\LavishTokens.g:1:17: Comparer
			{
			DebugLocation(1, 17);
			mComparer(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// Grammars\\LavishTokens.g:1:26: COMMENT
			{
			DebugLocation(1, 26);
			mCOMMENT(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// Grammars\\LavishTokens.g:1:34: Mult
			{
			DebugLocation(1, 34);
			mMult(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// Grammars\\LavishTokens.g:1:39: Div
			{
			DebugLocation(1, 39);
			mDiv(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// Grammars\\LavishTokens.g:1:43: Plus
			{
			DebugLocation(1, 43);
			mPlus(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// Grammars\\LavishTokens.g:1:48: Minus
			{
			DebugLocation(1, 48);
			mMinus(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// Grammars\\LavishTokens.g:1:54: Modu
			{
			DebugLocation(1, 54);
			mModu(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// Grammars\\LavishTokens.g:1:59: Xor
			{
			DebugLocation(1, 59);
			mXor(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// Grammars\\LavishTokens.g:1:63: Band
			{
			DebugLocation(1, 63);
			mBand(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// Grammars\\LavishTokens.g:1:68: Bor
			{
			DebugLocation(1, 68);
			mBor(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// Grammars\\LavishTokens.g:1:72: LeftShift
			{
			DebugLocation(1, 72);
			mLeftShift(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// Grammars\\LavishTokens.g:1:82: RightShift
			{
			DebugLocation(1, 82);
			mRightShift(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// Grammars\\LavishTokens.g:1:93: Bnegate
			{
			DebugLocation(1, 93);
			mBnegate(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// Grammars\\LavishTokens.g:1:101: Assign
			{
			DebugLocation(1, 101);
			mAssign(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// Grammars\\LavishTokens.g:1:108: Unmac
			{
			DebugLocation(1, 108);
			mUnmac(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// Grammars\\LavishTokens.g:1:114: Define
			{
			DebugLocation(1, 114);
			mDefine(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// Grammars\\LavishTokens.g:1:121: Macro
			{
			DebugLocation(1, 121);
			mMacro(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// Grammars\\LavishTokens.g:1:127: EndMac
			{
			DebugLocation(1, 127);
			mEndMac(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// Grammars\\LavishTokens.g:1:134: PreIf
			{
			DebugLocation(1, 134);
			mPreIf(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// Grammars\\LavishTokens.g:1:140: EndIf
			{
			DebugLocation(1, 140);
			mEndIf(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// Grammars\\LavishTokens.g:1:146: PreElse
			{
			DebugLocation(1, 146);
			mPreElse(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// Grammars\\LavishTokens.g:1:154: PreElseIf
			{
			DebugLocation(1, 154);
			mPreElseIf(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// Grammars\\LavishTokens.g:1:164: IfDef
			{
			DebugLocation(1, 164);
			mIfDef(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// Grammars\\LavishTokens.g:1:170: IfNDef
			{
			DebugLocation(1, 170);
			mIfNDef(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// Grammars\\LavishTokens.g:1:177: Echo
			{
			DebugLocation(1, 177);
			mEcho(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// Grammars\\LavishTokens.g:1:182: Error
			{
			DebugLocation(1, 182);
			mError(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// Grammars\\LavishTokens.g:1:188: Include
			{
			DebugLocation(1, 188);
			mInclude(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// Grammars\\LavishTokens.g:1:196: Negate
			{
			DebugLocation(1, 196);
			mNegate(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// Grammars\\LavishTokens.g:1:203: Dollar
			{
			DebugLocation(1, 203);
			mDollar(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// Grammars\\LavishTokens.g:1:210: LCurly
			{
			DebugLocation(1, 210);
			mLCurly(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// Grammars\\LavishTokens.g:1:217: RCurly
			{
			DebugLocation(1, 217);
			mRCurly(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// Grammars\\LavishTokens.g:1:224: LParen
			{
			DebugLocation(1, 224);
			mLParen(); 

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// Grammars\\LavishTokens.g:1:231: Quote
			{
			DebugLocation(1, 231);
			mQuote(); 

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// Grammars\\LavishTokens.g:1:237: RParen
			{
			DebugLocation(1, 237);
			mRParen(); 

			}
			break;
		case 36:
			DebugEnterAlt(36);
			// Grammars\\LavishTokens.g:1:244: ObjectDef
			{
			DebugLocation(1, 244);
			mObjectDef(); 

			}
			break;
		case 37:
			DebugEnterAlt(37);
			// Grammars\\LavishTokens.g:1:254: Dot
			{
			DebugLocation(1, 254);
			mDot(); 

			}
			break;
		case 38:
			DebugEnterAlt(38);
			// Grammars\\LavishTokens.g:1:258: Colon
			{
			DebugLocation(1, 258);
			mColon(); 

			}
			break;
		case 39:
			DebugEnterAlt(39);
			// Grammars\\LavishTokens.g:1:264: Comma
			{
			DebugLocation(1, 264);
			mComma(); 

			}
			break;
		case 40:
			DebugEnterAlt(40);
			// Grammars\\LavishTokens.g:1:270: RSquare
			{
			DebugLocation(1, 270);
			mRSquare(); 

			}
			break;
		case 41:
			DebugEnterAlt(41);
			// Grammars\\LavishTokens.g:1:278: LSquare
			{
			DebugLocation(1, 278);
			mLSquare(); 

			}
			break;
		case 42:
			DebugEnterAlt(42);
			// Grammars\\LavishTokens.g:1:286: Default
			{
			DebugLocation(1, 286);
			mDefault(); 

			}
			break;
		case 43:
			DebugEnterAlt(43);
			// Grammars\\LavishTokens.g:1:294: Case
			{
			DebugLocation(1, 294);
			mCase(); 

			}
			break;
		case 44:
			DebugEnterAlt(44);
			// Grammars\\LavishTokens.g:1:299: VariableCase
			{
			DebugLocation(1, 299);
			mVariableCase(); 

			}
			break;
		case 45:
			DebugEnterAlt(45);
			// Grammars\\LavishTokens.g:1:312: While
			{
			DebugLocation(1, 312);
			mWhile(); 

			}
			break;
		case 46:
			DebugEnterAlt(46);
			// Grammars\\LavishTokens.g:1:318: Do
			{
			DebugLocation(1, 318);
			mDo(); 

			}
			break;
		case 47:
			DebugEnterAlt(47);
			// Grammars\\LavishTokens.g:1:321: For
			{
			DebugLocation(1, 321);
			mFor(); 

			}
			break;
		case 48:
			DebugEnterAlt(48);
			// Grammars\\LavishTokens.g:1:325: If
			{
			DebugLocation(1, 325);
			mIf(); 

			}
			break;
		case 49:
			DebugEnterAlt(49);
			// Grammars\\LavishTokens.g:1:328: ElseIf
			{
			DebugLocation(1, 328);
			mElseIf(); 

			}
			break;
		case 50:
			DebugEnterAlt(50);
			// Grammars\\LavishTokens.g:1:335: Else
			{
			DebugLocation(1, 335);
			mElse(); 

			}
			break;
		case 51:
			DebugEnterAlt(51);
			// Grammars\\LavishTokens.g:1:340: And
			{
			DebugLocation(1, 340);
			mAnd(); 

			}
			break;
		case 52:
			DebugEnterAlt(52);
			// Grammars\\LavishTokens.g:1:344: Or
			{
			DebugLocation(1, 344);
			mOr(); 

			}
			break;
		case 53:
			DebugEnterAlt(53);
			// Grammars\\LavishTokens.g:1:347: Variable
			{
			DebugLocation(1, 347);
			mVariable(); 

			}
			break;
		case 54:
			DebugEnterAlt(54);
			// Grammars\\LavishTokens.g:1:356: DeclareVariable
			{
			DebugLocation(1, 356);
			mDeclareVariable(); 

			}
			break;
		case 55:
			DebugEnterAlt(55);
			// Grammars\\LavishTokens.g:1:372: Switch
			{
			DebugLocation(1, 372);
			mSwitch(); 

			}
			break;
		case 56:
			DebugEnterAlt(56);
			// Grammars\\LavishTokens.g:1:379: Function
			{
			DebugLocation(1, 379);
			mFunction(); 

			}
			break;
		case 57:
			DebugEnterAlt(57);
			// Grammars\\LavishTokens.g:1:388: Atom
			{
			DebugLocation(1, 388);
			mAtom(); 

			}
			break;
		case 58:
			DebugEnterAlt(58);
			// Grammars\\LavishTokens.g:1:393: Method
			{
			DebugLocation(1, 393);
			mMethod(); 

			}
			break;
		case 59:
			DebugEnterAlt(59);
			// Grammars\\LavishTokens.g:1:400: Member
			{
			DebugLocation(1, 400);
			mMember(); 

			}
			break;
		case 60:
			DebugEnterAlt(60);
			// Grammars\\LavishTokens.g:1:407: Scope
			{
			DebugLocation(1, 407);
			mScope(); 

			}
			break;
		case 61:
			DebugEnterAlt(61);
			// Grammars\\LavishTokens.g:1:413: Inherits
			{
			DebugLocation(1, 413);
			mInherits(); 

			}
			break;
		case 62:
			DebugEnterAlt(62);
			// Grammars\\LavishTokens.g:1:422: ID
			{
			DebugLocation(1, 422);
			mID(); 

			}
			break;
		case 63:
			DebugEnterAlt(63);
			// Grammars\\LavishTokens.g:1:425: INT
			{
			DebugLocation(1, 425);
			mINT(); 

			}
			break;
		case 64:
			DebugEnterAlt(64);
			// Grammars\\LavishTokens.g:1:429: NewLine
			{
			DebugLocation(1, 429);
			mNewLine(); 

			}
			break;
		case 65:
			DebugEnterAlt(65);
			// Grammars\\LavishTokens.g:1:437: Semi
			{
			DebugLocation(1, 437);
			mSemi(); 

			}
			break;
		case 66:
			DebugEnterAlt(66);
			// Grammars\\LavishTokens.g:1:442: WS
			{
			DebugLocation(1, 442);
			mWS(); 

			}
			break;
		case 67:
			DebugEnterAlt(67);
			// Grammars\\LavishTokens.g:1:445: FLOAT
			{
			DebugLocation(1, 445);
			mFLOAT(); 

			}
			break;
		case 68:
			DebugEnterAlt(68);
			// Grammars\\LavishTokens.g:1:451: Other
			{
			DebugLocation(1, 451);
			mOther(); 

			}
			break;

		}

	}


	#region DFA
	DFA20 dfa20;
	DFA25 dfa25;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa20 = new DFA20(this);
		dfa25 = new DFA25(this, SpecialStateTransition25);
	}

	private class DFA20 : DFA
	{
		private const string DFA20_eotS =
			"\x5\xFFFF";
		private const string DFA20_eofS =
			"\x5\xFFFF";
		private const string DFA20_minS =
			"\x2\x2E\x3\xFFFF";
		private const string DFA20_maxS =
			"\x1\x39\x1\x65\x3\xFFFF";
		private const string DFA20_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1\x1\x3";
		private const string DFA20_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA20_transitionS =
			{
				"\x1\x2\x1\xFFFF\xA\x1",
				"\x1\x3\x1\xFFFF\xA\x1\xB\xFFFF\x1\x4\x1F\xFFFF\x1\x4",
				"",
				"",
				""
			};

		private static readonly short[] DFA20_eot = DFA.UnpackEncodedString(DFA20_eotS);
		private static readonly short[] DFA20_eof = DFA.UnpackEncodedString(DFA20_eofS);
		private static readonly char[] DFA20_min = DFA.UnpackEncodedStringToUnsignedChars(DFA20_minS);
		private static readonly char[] DFA20_max = DFA.UnpackEncodedStringToUnsignedChars(DFA20_maxS);
		private static readonly short[] DFA20_accept = DFA.UnpackEncodedString(DFA20_acceptS);
		private static readonly short[] DFA20_special = DFA.UnpackEncodedString(DFA20_specialS);
		private static readonly short[][] DFA20_transition;

		static DFA20()
		{
			int numStates = DFA20_transitionS.Length;
			DFA20_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA20_transition[i] = DFA.UnpackEncodedString(DFA20_transitionS[i]);
			}
		}

		public DFA20( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 20;
			this.eot = DFA20_eot;
			this.eof = DFA20_eof;
			this.min = DFA20_min;
			this.max = DFA20_max;
			this.accept = DFA20_accept;
			this.special = DFA20_special;
			this.transition = DFA20_transition;
		}

		public override string Description { get { return "281:1: FLOAT : ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? | '.' ( '0' .. '9' )+ ( EXPONENT )? | ( '0' .. '9' )+ EXPONENT );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA25 : DFA
	{
		private const string DFA25_eotS =
			"\x1\xFFFF\x1\x30\x1\x33\x1\x34\x2\x32\x1\x38\x2\x2E\x1\x3C\x5\xFFFF\x1"+
			"\x44\x1\x46\x1\xFFFF\x1\x2E\x6\xFFFF\x1\x54\x4\xFFFF\xC\x54\x1\xFFFF"+
			"\x1\x69\xE\xFFFF\x2\x3C\x17\xFFFF\x1\x54\x5\xFFFF\x1\x54\x1\x77\x5\x54"+
			"\x1\x7D\x8\x54\x1\xFFFF\x1\x69\x2\xFFFF\x1\x3C\x4\xFFFF\x1\x8B\x1\xFFFF"+
			"\x3\x54\x1\xFFFF\x3\x54\x1\x92\x1\x54\x1\xFFFF\x9\x54\x5\xFFFF\x3\x54"+
			"\x1\xA3\x2\x54\x1\xFFFF\x2\x54\x1\xA9\x2\x54\x1\xAC\x4\x54\x2\xFFFF\x1"+
			"\xB2\x3\x54\x1\xFFFF\x1\x54\x1\xB7\x3\x54\x1\xFFFF\x2\x54\x1\xFFFF\x2"+
			"\x54\x1\xBF\x1\x54\x2\xFFFF\x1\xBF\x3\x54\x1\xFFFF\x2\x54\x1\xC7\x1\xC8"+
			"\x1\xBF\x1\xC9\x1\xCA\x1\xFFFF\x1\xBF\x1\x54\x1\xCD\x4\x54\x4\xFFFF\x2"+
			"\x54\x1\xFFFF\x1\x54\x1\xD6\x1\xD7\x1\xD8\x1\x54\x1\xDA\x2\x54\x3\xFFFF"+
			"\x1\x54\x1\xFFFF\x2\x54\x1\xBF\x3\x54\x1\xE3\x1\x54\x1\xFFFF\x1\x54\x1"+
			"\xE6\x1\xFFFF";
		private const string DFA25_eofS =
			"\xE7\xFFFF";
		private const string DFA25_minS =
			"\x1\x0\x1\x2E\x2\x3D\x1\x3E\x1\x3C\x1\x2A\x2\xA\x1\x9\x5\xFFFF\x1\x26"+
			"\x1\x7C\x1\xFFFF\x1\x64\x6\xFFFF\x1\x62\x4\xFFFF\x1\x65\x2\x61\x1\x68"+
			"\x1\x6F\x1\x66\x1\x6C\x1\x63\x1\x74\x1\x65\x1\x6F\x1\x6C\x1\xFFFF\x1"+
			"\x2E\xD\xFFFF\x1\xA\x2\x9\x1\xFFFF\x1\xA\xD\xFFFF\x1\x63\x1\x66\x6\xFFFF"+
			"\x1\x6A\x5\xFFFF\x1\x63\x1\x30\x1\x73\x1\x72\x1\x69\x1\x72\x1\x6E\x1"+
			"\x30\x1\x68\x1\x73\x1\x69\x1\x72\x1\x6F\x1\x6D\x1\x63\x1\x6F\x1\xFFFF"+
			"\x1\x2E\x2\xFFFF\x1\x9\x1\x64\x1\x73\x2\xFFFF\x1\x64\x1\xFFFF\x1\x65"+
			"\x1\x61\x1\x6C\x1\xFFFF\x1\x65\x1\x69\x1\x6C\x1\x30\x1\x63\x1\xFFFF\x2"+
			"\x65\x1\x74\x1\x69\x1\x6D\x1\x68\x1\x62\x1\x61\x1\x62\x1\x69\x1\x65\x3"+
			"\xFFFF\x1\x63\x1\x75\x1\x61\x1\x30\x1\x61\x1\x65\x1\xFFFF\x1\x74\x1\x72"+
			"\x1\x30\x1\x63\x1\x70\x1\x30\x1\x6F\x1\x65\x1\x6C\x1\x61\x2\xFFFF\x1"+
			"\x69\x1\x74\x1\x6C\x1\x72\x1\xFFFF\x1\x62\x1\x30\x2\x69\x1\x66\x1\xFFFF"+
			"\x1\x68\x1\x74\x1\xFFFF\x1\x64\x1\x72\x1\x30\x1\x6C\x2\xFFFF\x1\x30\x1"+
			"\x74\x1\x65\x1\x6C\x1\xFFFF\x1\x6F\x1\x74\x5\x30\x1\xFFFF\x1\x30\x1\x65"+
			"\x1\x30\x1\x76\x1\x65\x1\x6E\x1\x73\x4\xFFFF\x1\x65\x1\x66\x1\xFFFF\x1"+
			"\x61\x3\x30\x1\x65\x1\x30\x1\x72\x1\x61\x3\xFFFF\x1\x70\x1\xFFFF\x1\x69"+
			"\x1\x73\x1\x30\x1\x61\x1\x65\x1\x62\x1\x30\x1\x6C\x1\xFFFF\x1\x65\x1"+
			"\x30\x1\xFFFF";
		private const string DFA25_maxS =
			"\x1\xFFFF\x1\x39\x2\x3D\x1\x3E\x1\x3C\x1\x2A\x1\xD\x1\xA\x1\x5C\x5\xFFFF"+
			"\x1\x26\x1\x7C\x1\xFFFF\x1\x75\x6\xFFFF\x1\x62\x4\xFFFF\x1\x6F\x2\x61"+
			"\x1\x68\x1\x75\x1\x6E\x1\x6C\x1\x77\x1\x74\x1\x65\x1\x6F\x1\x6C\x1\xFFFF"+
			"\x1\x65\xD\xFFFF\x1\xA\x2\x5C\x1\xFFFF\x1\xD\xD\xFFFF\x1\x72\x1\x6E\x6"+
			"\xFFFF\x1\x6A\x5\xFFFF\x1\x66\x1\x7A\x1\x73\x1\x72\x1\x69\x1\x72\x1\x6E"+
			"\x1\x7A\x1\x68\x1\x73\x1\x69\x1\x72\x1\x6F\x1\x74\x1\x63\x1\x6F\x1\xFFFF"+
			"\x1\x65\x2\xFFFF\x1\x5C\x1\x64\x1\x73\x2\xFFFF\x1\x6E\x1\xFFFF\x1\x65"+
			"\x1\x61\x1\x6C\x1\xFFFF\x1\x65\x1\x69\x1\x6C\x1\x7A\x1\x63\x1\xFFFF\x2"+
			"\x65\x1\x74\x1\x69\x1\x6D\x1\x68\x1\x62\x1\x61\x1\x62\x1\x6D\x1\x65\x3"+
			"\xFFFF\x1\x63\x1\x75\x1\x61\x1\x7A\x1\x61\x1\x65\x1\xFFFF\x1\x74\x1\x72"+
			"\x1\x7A\x1\x63\x1\x70\x1\x7A\x1\x6F\x1\x65\x1\x6C\x1\x61\x2\xFFFF\x1"+
			"\x69\x1\x74\x1\x6C\x1\x72\x1\xFFFF\x1\x62\x1\x7A\x2\x69\x1\x66\x1\xFFFF"+
			"\x1\x68\x1\x74\x1\xFFFF\x1\x64\x1\x72\x1\x7A\x1\x6C\x2\xFFFF\x1\x7A\x1"+
			"\x74\x1\x65\x1\x6C\x1\xFFFF\x1\x6F\x1\x74\x5\x7A\x1\xFFFF\x1\x7A\x1\x65"+
			"\x1\x7A\x1\x76\x1\x65\x1\x6E\x1\x73\x4\xFFFF\x1\x65\x1\x66\x1\xFFFF\x1"+
			"\x61\x3\x7A\x1\x65\x1\x7A\x1\x72\x1\x61\x3\xFFFF\x1\x70\x1\xFFFF\x1\x69"+
			"\x1\x73\x1\x7A\x1\x61\x1\x65\x1\x62\x1\x7A\x1\x6C\x1\xFFFF\x1\x65\x1"+
			"\x7A\x1\xFFFF";
		private const string DFA25_acceptS =
			"\xA\xFFFF\x1\x4\x1\x6\x1\x7\x1\x8\x1\x9\x2\xFFFF\x1\xE\x1\xFFFF\x1\x1E"+
			"\x1\x1F\x1\x20\x1\x21\x1\x22\x1\x23\x1\xFFFF\x1\x26\x1\x27\x1\x28\x1"+
			"\x29\xC\xFFFF\x1\x3E\x1\xFFFF\x1\x41\x1\x42\x1\x44\x1\x1\x1\x25\x1\x43"+
			"\x1\x2\x1\xF\x1\x1D\x1\xD\x1\xC\x1\x3\x1\x5\x3\xFFFF\x1\x40\x1\xFFFF"+
			"\x1\x4\x1\x6\x1\x7\x1\x8\x1\x9\x1\x33\x1\xA\x1\x34\x1\xB\x1\xE\x1\x10"+
			"\x1\x11\x1\x12\x2\xFFFF\x1\x1E\x1\x1F\x1\x20\x1\x21\x1\x22\x1\x23\x1"+
			"\xFFFF\x1\x3E\x1\x26\x1\x27\x1\x28\x1\x29\x10\xFFFF\x1\x3F\x1\xFFFF\x1"+
			"\x41\x1\x42\x3\xFFFF\x1\x1A\x1\x1B\x1\xFFFF\x1\x1C\x3\xFFFF\x1\x2E\x5"+
			"\xFFFF\x1\x30\xB\xFFFF\x1\x18\x1\x19\x1\x14\x6\xFFFF\x1\x2F\xA\xFFFF"+
			"\x1\x13\x1\x15\x4\xFFFF\x1\x2B\x5\xFFFF\x1\x32\x2\xFFFF\x1\x39\x4\xFFFF"+
			"\x1\x17\x1\x16\x4\xFFFF\x1\x2D\x7\xFFFF\x1\x3C\x7\xFFFF\x1\x31\x1\x37"+
			"\x1\x3A\x1\x3B\x2\xFFFF\x1\x2A\x8\xFFFF\x1\x35\x1\x38\x1\x3D\x1\xFFFF"+
			"\x1\x24\x8\xFFFF\x1\x2C\x2\xFFFF\x1\x36";
		private const string DFA25_specialS =
			"\x1\x0\xE6\xFFFF}>";
		private static readonly string[] DFA25_transitionS =
			{
				"\x9\x2E\x1\x2D\x1\x9\x2\x2E\x1\x8\x12\x2E\x1\x2D\x1\x3\x1\x17\x1\x12"+
				"\x1\x13\x1\xD\x1\xF\x1\x2E\x1\x16\x1\x18\x1\xA\x1\xB\x1\x1B\x1\xC\x1"+
				"\x1\x1\x6\xA\x2B\x1\x1A\x1\x2C\x1\x5\x1\x2\x1\x4\x2\x2E\x1A\x2A\x1\x1D"+
				"\x1\x7\x1\x1C\x1\xE\x1\x2A\x1\x2E\x1\x26\x1\x2A\x1\x1F\x1\x1E\x1\x24"+
				"\x1\x22\x1\x29\x1\x2A\x1\x23\x2\x2A\x1\x28\x1\x27\x1\x2A\x1\x19\x3\x2A"+
				"\x1\x25\x2\x2A\x1\x20\x1\x21\x3\x2A\x1\x14\x1\x10\x1\x15\x1\x11\xFF81"+
				"\x2E",
				"\x1\x2F\x1\xFFFF\xA\x31",
				"\x1\x32",
				"\x1\x32",
				"\x1\x35",
				"\x1\x36",
				"\x1\x37",
				"\x1\x3A\x2\xFFFF\x1\x39",
				"\x1\x3A",
				"\x1\x3B\x1\x3A\x2\xFFFF\x1\x39\x12\xFFFF\x1\x3B\x1A\xFFFF\x1\x37\x20"+
				"\xFFFF\x1\x3D",
				"",
				"",
				"",
				"",
				"",
				"\x1\x43",
				"\x1\x45",
				"",
				"\x1\x49\x1\x4B\x3\xFFFF\x1\x4C\x3\xFFFF\x1\x4A\x7\xFFFF\x1\x48",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x53",
				"",
				"",
				"",
				"",
				"\x1\x59\x9\xFFFF\x1\x5A",
				"\x1\x5B",
				"\x1\x5C",
				"\x1\x5D",
				"\x1\x5E\x5\xFFFF\x1\x5F",
				"\x1\x60\x7\xFFFF\x1\x61",
				"\x1\x62",
				"\x1\x64\x13\xFFFF\x1\x63",
				"\x1\x65",
				"\x1\x66",
				"\x1\x67",
				"\x1\x68",
				"",
				"\x1\x31\x1\xFFFF\xA\x6A\xB\xFFFF\x1\x31\x1F\xFFFF\x1\x31",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x3A",
				"\x1\x3B\x1\x3A\x2\xFFFF\x1\x39\x12\xFFFF\x1\x3B\x1A\xFFFF\x1\x37\x20"+
				"\xFFFF\x1\x3D",
				"\x1\x6D\x1\x3A\x2\xFFFF\x1\x39\x12\xFFFF\x1\x6D\x1A\xFFFF\x1\x37\x20"+
				"\xFFFF\x1\x3D",
				"",
				"\x1\x3A\x2\xFFFF\x1\x39",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x70\x8\xFFFF\x1\x6F\x1\xFFFF\x1\x6E\x3\xFFFF\x1\x71",
				"\x1\x72\x7\xFFFF\x1\x73",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x74",
				"",
				"",
				"",
				"",
				"",
				"\x1\x76\x2\xFFFF\x1\x75",
				"\xA\x54\x7\xFFFF\x1A\x54\x4\xFFFF\x1\x54\x1\xFFFF\x1A\x54",
				"\x1\x78",
				"\x1\x79",
				"\x1\x7A",
				"\x1\x7B",
				"\x1\x7C",
				"\xA\x54\x7\xFFFF\x1A\x54\x4\xFFFF\x1\x54\x1\xFFFF\x1A\x54",
				"\x1\x7E",
				"\x1\x7F",
				"\x1\x80",
				"\x1\x81",
				"\x1\x82",
				"\x1\x84\x6\xFFFF\x1\x83",
				"\x1\x85",
				"\x1\x86",
				"",
				"\x1\x31\x1\xFFFF\xA\x6A\xB\xFFFF\x1\x31\x1F\xFFFF\x1\x31",
				"",
				"",
				"\x1\x6D\x1\x3A\x2\xFFFF\x1\x39\x12\xFFFF\x1\x6D\x1A\xFFFF\x1\x37\x20"+
				"\xFFFF\x1\x3D",
				"\x1\x87",
				"\x1\x88",
				"",
				"",
				"\x1\x89\x9\xFFFF\x1\x8A",
				"",
				"\x1\x8C",
				"\x1\x8D",
				"\x1\x8E",
				"",
				"\x1\x8F",
				"\x1\x90",
				"\x1\x91",
				"\xA\x54\x7\xFFFF\x1A\x54\x4\xFFFF\x1\x54\x1\xFFFF\x1A\x54",
				"\x1\x93",
				"",
				"\x1\x94",
				"\x1\x95",
				"\x1\x96",
				"\x1\x97",
				"\x1\x98",
				"\x1\x99",
				"\x1\x9A",
				"\x1\x9B",
				"\x1\x9C",
				"\x1\x9E\x3\xFFFF\x1\x9D",
				"\x1\x9F",
				"",
				"",
				"",
				"\x1\xA0",
				"\x1\xA1",
				"\x1\xA2",
				"\xA\x54\x7\xFFFF\x1A\x54\x4\xFFFF\x1\x54\x1\xFFFF\x1A\x54",
				"\x1\xA4",
				"\x1\xA5",
				"",
				"\x1\xA6",
				"\x1\xA7",
				"\xA\x54\x7\xFFFF\x1A\x54\x4\xFFFF\x1\x54\x1\xFFFF\x8\x54\x1\xA8\x11"+
				"\x54",
				"\x1\xAA",
				"\x1\xAB",
				"\xA\x54\x7\xFFFF\x1A\x54\x4\xFFFF\x1\x54\x1\xFFFF\x1A\x54",
				"\x1\xAD",
				"\x1\xAE",
				"\x1\xAF",
				"\x1\xB0",
				"",
				"",
				"\x1\xB1",
				"\x1\xB3",
				"\x1\xB4",
				"\x1\xB5",
				"",
				"\x1\xB6",
				"\xA\x54\x7\xFFFF\x1A\x54\x4\xFFFF\x1\x54\x1\xFFFF\x1A\x54",
				"\x1\xB8",
				"\x1\xB9",
				"\x1\xBA",
				"",
				"\x1\xBB",
				"\x1\xBC",
				"",
				"\x1\xBD",
				"\x1\xBE",
				"\xA\x54\x7\xFFFF\x1A\x54\x4\xFFFF\x1\x54\x1\xFFFF\x1A\x54",
				"\x1\xC0",
				"",
				"",
				"\xA\x54\x7\xFFFF\x1A\x54\x4\xFFFF\x1\x54\x1\xFFFF\x3\x54\x1\xC1\x16"+
				"\x54",
				"\x1\xC2",
				"\x1\xC3",
				"\x1\xC4",
				"",
				"\x1\xC5",
				"\x1\xC6",
				"\xA\x54\x7\xFFFF\x1A\x54\x4\xFFFF\x1\x54\x1\xFFFF\x1A\x54",
				"\xA\x54\x7\xFFFF\x1A\x54\x4\xFFFF\x1\x54\x1\xFFFF\x1A\x54",
				"\xA\x54\x7\xFFFF\x1A\x54\x4\xFFFF\x1\x54\x1\xFFFF\x1A\x54",
				"\xA\x54\x7\xFFFF\x1A\x54\x4\xFFFF\x1\x54\x1\xFFFF\x1A\x54",
				"\xA\x54\x7\xFFFF\x1A\x54\x4\xFFFF\x1\x54\x1\xFFFF\x1A\x54",
				"",
				"\xA\x54\x7\xFFFF\x1A\x54\x4\xFFFF\x1\x54\x1\xFFFF\xA\x54\x1\xCB\xF\x54",
				"\x1\xCC",
				"\xA\x54\x7\xFFFF\x1A\x54\x4\xFFFF\x1\x54\x1\xFFFF\x1A\x54",
				"\x1\xCE",
				"\x1\xCF",
				"\x1\xD0",
				"\x1\xD1",
				"",
				"",
				"",
				"",
				"\x1\xD2",
				"\x1\xD3",
				"",
				"\x1\xD4",
				"\xA\x54\x7\xFFFF\x1A\x54\x4\xFFFF\x1\x54\x1\xFFFF\x2\x54\x1\xD5\x17"+
				"\x54",
				"\xA\x54\x7\xFFFF\x1A\x54\x4\xFFFF\x1\x54\x1\xFFFF\x1A\x54",
				"\xA\x54\x7\xFFFF\x1A\x54\x4\xFFFF\x1\x54\x1\xFFFF\x1A\x54",
				"\x1\xD9",
				"\xA\x54\x7\xFFFF\x1A\x54\x4\xFFFF\x1\x54\x1\xFFFF\x1A\x54",
				"\x1\xDB",
				"\x1\xDC",
				"",
				"",
				"",
				"\x1\xDD",
				"",
				"\x1\xDE",
				"\x1\xDF",
				"\xA\x54\x7\xFFFF\x1A\x54\x4\xFFFF\x1\x54\x1\xFFFF\x1A\x54",
				"\x1\xE0",
				"\x1\xE1",
				"\x1\xE2",
				"\xA\x54\x7\xFFFF\x1A\x54\x4\xFFFF\x1\x54\x1\xFFFF\x1A\x54",
				"\x1\xE4",
				"",
				"\x1\xE5",
				"\xA\x54\x7\xFFFF\x1A\x54\x4\xFFFF\x1\x54\x1\xFFFF\x1A\x54",
				""
			};

		private static readonly short[] DFA25_eot = DFA.UnpackEncodedString(DFA25_eotS);
		private static readonly short[] DFA25_eof = DFA.UnpackEncodedString(DFA25_eofS);
		private static readonly char[] DFA25_min = DFA.UnpackEncodedStringToUnsignedChars(DFA25_minS);
		private static readonly char[] DFA25_max = DFA.UnpackEncodedStringToUnsignedChars(DFA25_maxS);
		private static readonly short[] DFA25_accept = DFA.UnpackEncodedString(DFA25_acceptS);
		private static readonly short[] DFA25_special = DFA.UnpackEncodedString(DFA25_specialS);
		private static readonly short[][] DFA25_transition;

		static DFA25()
		{
			int numStates = DFA25_transitionS.Length;
			DFA25_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA25_transition[i] = DFA.UnpackEncodedString(DFA25_transitionS[i]);
			}
		}

		public DFA25( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 25;
			this.eot = DFA25_eot;
			this.eof = DFA25_eof;
			this.min = DFA25_min;
			this.max = DFA25_max;
			this.accept = DFA25_accept;
			this.special = DFA25_special;
			this.transition = DFA25_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( Elipse | Comparer | COMMENT | Mult | Div | Plus | Minus | Modu | Xor | Band | Bor | LeftShift | RightShift | Bnegate | Assign | Unmac | Define | Macro | EndMac | PreIf | EndIf | PreElse | PreElseIf | IfDef | IfNDef | Echo | Error | Include | Negate | Dollar | LCurly | RCurly | LParen | Quote | RParen | ObjectDef | Dot | Colon | Comma | RSquare | LSquare | Default | Case | VariableCase | While | Do | For | If | ElseIf | Else | And | Or | Variable | DeclareVariable | Switch | Function | Atom | Method | Member | Scope | Inherits | ID | INT | NewLine | Semi | WS | FLOAT | Other );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition25(DFA dfa, int s, IIntStream _input)
	{
		IIntStream input = _input;
		int _s = s;
		s = -1;
		int LA25_1 = input.LA(1);
		int index25_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				if ((LA25_1=='.')) {s = 1;}

				else if ((LA25_1=='=')) {s = 2;}

				else if ((LA25_1=='!')) {s = 3;}

				else if ((LA25_1=='>')) {s = 4;}

				else if ((LA25_1=='<')) {s = 5;}

				else if ((LA25_1=='/')) {s = 6;}

				else if ((LA25_1=='\\')) {s = 7;}

				else if ((LA25_1=='\r')) {s = 8;}

				else if ((LA25_1=='\n')) {s = 9;}

				else if ((LA25_1=='*')) {s = 10;}

				else if ((LA25_1=='+')) {s = 11;}

				else if ((LA25_1=='-')) {s = 12;}

				else if ((LA25_1=='%')) {s = 13;}

				else if ((LA25_1=='^')) {s = 14;}

				else if ((LA25_1=='&')) {s = 15;}

				else if ((LA25_1=='|')) {s = 16;}

				else if ((LA25_1=='~')) {s = 17;}

				else if ((LA25_1=='#')) {s = 18;}

				else if ((LA25_1=='$')) {s = 19;}

				else if ((LA25_1=='{')) {s = 20;}

				else if ((LA25_1=='}')) {s = 21;}

				else if ((LA25_1=='(')) {s = 22;}

				else if ((LA25_1=='\"')) {s = 23;}

				else if ((LA25_1==')')) {s = 24;}

				else if ((LA25_1=='o')) {s = 25;}

				else if ((LA25_1==':')) {s = 26;}

				else if ((LA25_1==',')) {s = 27;}

				else if ((LA25_1==']')) {s = 28;}

				else if ((LA25_1=='[')) {s = 29;}

				else if ((LA25_1=='d')) {s = 30;}

				else if ((LA25_1=='c')) {s = 31;}

				else if ((LA25_1=='v')) {s = 32;}

				else if ((LA25_1=='w')) {s = 33;}

				else if ((LA25_1=='f')) {s = 34;}

				else if ((LA25_1=='i')) {s = 35;}

				else if ((LA25_1=='e')) {s = 36;}

				else if ((LA25_1=='s')) {s = 37;}

				else if ((LA25_1=='a')) {s = 38;}

				else if ((LA25_1=='m')) {s = 39;}

				else if ((LA25_1=='l')) {s = 40;}

				else if ((LA25_1=='g')) {s = 41;}

				else if (((LA25_1>='A' && LA25_1<='Z')||LA25_1=='_'||LA25_1=='b'||LA25_1=='h'||(LA25_1>='j' && LA25_1<='k')||LA25_1=='n'||(LA25_1>='p' && LA25_1<='r')||(LA25_1>='t' && LA25_1<='u')||(LA25_1>='x' && LA25_1<='z'))) {s = 42;}

				else if (((LA25_1>='0' && LA25_1<='9'))) {s = 43;}

				else if ((LA25_1==';')) {s = 44;}

				else if ((LA25_1=='\t'||LA25_1==' ')) {s = 45;}

				else if (((LA25_1>='\u0000' && LA25_1<='\b')||(LA25_1>='\u000B' && LA25_1<='\f')||(LA25_1>='\u000E' && LA25_1<='\u001F')||LA25_1=='\''||(LA25_1>='?' && LA25_1<='@')||LA25_1=='`'||(LA25_1>='\u007F' && LA25_1<='\uFFFF'))) {s = 46;}

				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		NoViableAltException nvae = new NoViableAltException(dfa.Description, 25, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
 
	#endregion

}
